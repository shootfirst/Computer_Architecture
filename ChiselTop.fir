;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit ChiselTop : 
  module IF : 
    input clock : Clock
    input reset : Reset
    output io : {mmu : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>, flip pageFault : UInt<1>}, id : {inst : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip branch : {valid : UInt<1>, bits : UInt<32>}, flip ready : UInt<1>}}
    
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h080000000"))) @[IF.scala 13:27]
    wire _T : {valid : UInt<1>, bits : UInt<32>} @[IF.scala 14:40]
    _T.bits <= UInt<32>("h00") @[IF.scala 14:40]
    _T.valid <= UInt<1>("h00") @[IF.scala 14:40]
    reg log_branch : {valid : UInt<1>, bits : UInt<32>}, clock with : (reset => (reset, _T)) @[IF.scala 14:27]
    wire _T_1 : {valid : UInt<1>, bits : UInt<32>} @[IF.scala 15:40]
    _T_1.bits <= UInt<32>("h00") @[IF.scala 15:40]
    _T_1.valid <= UInt<1>("h00") @[IF.scala 15:40]
    reg log_inst : {valid : UInt<1>, bits : UInt<32>}, clock with : (reset => (reset, _T_1)) @[IF.scala 15:27]
    wire mmu_inst : {valid : UInt<1>, bits : UInt<32>} @[IF.scala 17:22]
    mmu_inst.valid <= io.mmu.ok @[IF.scala 18:18]
    mmu_inst.bits <= io.mmu.rdata @[IF.scala 19:17]
    node branch = mux(io.id.branch.valid, io.id.branch, log_branch) @[IF.scala 21:19]
    node inst = mux(log_inst.valid, log_inst, mmu_inst) @[IF.scala 22:19]
    when io.id.branch.valid : @[IF.scala 25:28]
      log_branch.bits <= io.id.branch.bits @[IF.scala 26:16]
      log_branch.valid <= io.id.branch.valid @[IF.scala 26:16]
      skip @[IF.scala 25:28]
    node _T_2 = eq(log_inst.valid, UInt<1>("h00")) @[IF.scala 28:8]
    node _T_3 = and(_T_2, io.mmu.ok) @[IF.scala 28:24]
    when _T_3 : @[IF.scala 28:38]
      log_inst.valid <= UInt<1>("h01") @[IF.scala 29:20]
      log_inst.bits <= io.mmu.rdata @[IF.scala 30:19]
      skip @[IF.scala 28:38]
    node _T_4 = eq(inst.valid, UInt<1>("h00")) @[IF.scala 33:15]
    node _T_5 = eq(io.id.ready, UInt<1>("h00")) @[IF.scala 33:30]
    node stall = or(_T_4, _T_5) @[IF.scala 33:27]
    node _T_6 = eq(stall, UInt<1>("h00")) @[IF.scala 36:8]
    when _T_6 : @[IF.scala 36:16]
      node _T_7 = add(pc, UInt<3>("h04")) @[IF.scala 39:25]
      node _T_8 = tail(_T_7, 1) @[IF.scala 39:25]
      node _T_9 = mux(branch.valid, branch.bits, _T_8) @[Mux.scala 47:69]
      pc <= _T_9 @[IF.scala 37:8]
      wire _T_10 : {valid : UInt<1>, bits : UInt<32>} @[IF.scala 40:31]
      _T_10.bits <= UInt<32>("h00") @[IF.scala 40:31]
      _T_10.valid <= UInt<1>("h00") @[IF.scala 40:31]
      log_branch.bits <= _T_10.bits @[IF.scala 40:16]
      log_branch.valid <= _T_10.valid @[IF.scala 40:16]
      wire _T_11 : {valid : UInt<1>, bits : UInt<32>} @[IF.scala 41:31]
      _T_11.bits <= UInt<32>("h00") @[IF.scala 41:31]
      _T_11.valid <= UInt<1>("h00") @[IF.scala 41:31]
      log_inst.bits <= _T_11.bits @[IF.scala 41:16]
      log_inst.valid <= _T_11.valid @[IF.scala 41:16]
      skip @[IF.scala 36:16]
    io.mmu.addr <= pc @[IF.scala 45:16]
    node _T_12 = mux(log_inst.valid, UInt<1>("h00"), UInt<1>("h01")) @[IF.scala 46:22]
    io.mmu.mode <= _T_12 @[IF.scala 46:16]
    io.mmu.wdata <= UInt<1>("h00") @[IF.scala 47:16]
    io.id.inst <= UInt<32>("h013") @[IF.scala 52:15]
    wire _T_13 : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>} @[IF.scala 53:30]
    _T_13.valid_inst <= UInt<1>("h00") @[IF.scala 53:30]
    _T_13.pc <= UInt<32>("h00") @[IF.scala 53:30]
    _T_13.value <= UInt<32>("h00") @[IF.scala 53:30]
    _T_13.code <= UInt<32>("h00") @[IF.scala 53:30]
    _T_13.valid <= UInt<1>("h00") @[IF.scala 53:30]
    io.id.excep.valid_inst <= _T_13.valid_inst @[IF.scala 53:15]
    io.id.excep.pc <= _T_13.pc @[IF.scala 53:15]
    io.id.excep.value <= _T_13.value @[IF.scala 53:15]
    io.id.excep.code <= _T_13.code @[IF.scala 53:15]
    io.id.excep.valid <= _T_13.valid @[IF.scala 53:15]
    node _T_14 = or(stall, branch.valid) @[IF.scala 55:16]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[IF.scala 55:8]
    when _T_15 : @[IF.scala 55:34]
      io.id.inst <= inst.bits @[IF.scala 56:16]
      io.id.excep.pc <= pc @[IF.scala 57:20]
      io.id.excep.valid_inst <= UInt<1>("h01") @[IF.scala 58:28]
      node _T_16 = bits(pc, 1, 0) @[IF.scala 59:12]
      node _T_17 = orr(_T_16) @[IF.scala 59:18]
      when _T_17 : @[IF.scala 59:23]
        io.id.excep.valid <= UInt<1>("h01") @[IF.scala 60:25]
        io.id.excep.value <= pc @[IF.scala 61:25]
        io.id.excep.code <= UInt<1>("h00") @[IF.scala 62:24]
        skip @[IF.scala 59:23]
      when io.mmu.pageFault : @[IF.scala 64:28]
        io.id.excep.valid <= UInt<1>("h01") @[IF.scala 65:25]
        io.id.excep.value <= pc @[IF.scala 66:25]
        io.id.excep.code <= UInt<4>("h0c") @[IF.scala 67:24]
        skip @[IF.scala 64:28]
      skip @[IF.scala 55:34]
    
  module ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip iff : {inst : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip branch : {valid : UInt<1>, bits : UInt<32>}, flip ready : UInt<1>}, reg : {read1 : {addr : UInt<5>, flip data : UInt<32>}, read2 : {addr : UInt<5>, flip data : UInt<32>}}, ex : {aluOp : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, store_data : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip ready : UInt<1>}, csr : {addr : UInt<12>, flip rdata : UInt<32>, flip prv : UInt<2>}, flip flush : UInt<1>, flip exWrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, flip memWrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, flip exWrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, flip memWrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, debug : {bt : UInt<5>, l : UInt<1>, type_ : UInt<3>, opt : UInt<5>, pc : UInt<5>, imm : SInt<32>}}
    
    reg inst : UInt<32>, clock with : (reset => (reset, UInt<32>("h013"))) @[ID.scala 37:22]
    wire _T : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>} @[ID.scala 38:35]
    _T.valid_inst <= UInt<1>("h00") @[ID.scala 38:35]
    _T.pc <= UInt<32>("h00") @[ID.scala 38:35]
    _T.value <= UInt<32>("h00") @[ID.scala 38:35]
    _T.code <= UInt<32>("h00") @[ID.scala 38:35]
    _T.valid <= UInt<1>("h00") @[ID.scala 38:35]
    reg excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, clock with : (reset => (reset, _T)) @[ID.scala 38:22]
    reg fenceICnt : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID.scala 40:26]
    wire stall : UInt<1> @[ID.scala 48:19]
    when io.flush : @[ID.scala 50:15]
      inst <= UInt<32>("h013") @[ID.scala 51:11]
      wire _T_1 : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>} @[ID.scala 52:26]
      _T_1.valid_inst <= UInt<1>("h00") @[ID.scala 52:26]
      _T_1.pc <= UInt<32>("h00") @[ID.scala 52:26]
      _T_1.value <= UInt<32>("h00") @[ID.scala 52:26]
      _T_1.code <= UInt<32>("h00") @[ID.scala 52:26]
      _T_1.valid <= UInt<1>("h00") @[ID.scala 52:26]
      excep.valid_inst <= _T_1.valid_inst @[ID.scala 52:11]
      excep.pc <= _T_1.pc @[ID.scala 52:11]
      excep.value <= _T_1.value @[ID.scala 52:11]
      excep.code <= _T_1.code @[ID.scala 52:11]
      excep.valid <= _T_1.valid @[ID.scala 52:11]
      skip @[ID.scala 50:15]
    else : @[ID.scala 53:21]
      when stall : @[ID.scala 53:21]
        inst <= inst @[ID.scala 54:11]
        excep.valid_inst <= excep.valid_inst @[ID.scala 55:11]
        excep.pc <= excep.pc @[ID.scala 55:11]
        excep.value <= excep.value @[ID.scala 55:11]
        excep.code <= excep.code @[ID.scala 55:11]
        excep.valid <= excep.valid @[ID.scala 55:11]
        skip @[ID.scala 53:21]
      else : @[ID.scala 56:15]
        inst <= io.iff.inst @[ID.scala 58:11]
        excep.valid_inst <= io.iff.excep.valid_inst @[ID.scala 59:11]
        excep.pc <= io.iff.excep.pc @[ID.scala 59:11]
        excep.value <= io.iff.excep.value @[ID.scala 59:11]
        excep.code <= io.iff.excep.code @[ID.scala 59:11]
        excep.valid <= io.iff.excep.valid @[ID.scala 59:11]
        skip @[ID.scala 56:15]
    node _T_2 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<14>("h02013"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<14>("h03013"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<15>("h04013"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<15>("h06013"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<15>("h07013"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<13>("h01013"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<15>("h05013"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_19 = eq(UInt<31>("h040005013"), _T_18) @[Lookup.scala 31:38]
    node _T_20 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_21 = eq(UInt<6>("h033"), _T_20) @[Lookup.scala 31:38]
    node _T_22 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_23 = eq(UInt<31>("h040000033"), _T_22) @[Lookup.scala 31:38]
    node _T_24 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_25 = eq(UInt<13>("h01033"), _T_24) @[Lookup.scala 31:38]
    node _T_26 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_27 = eq(UInt<14>("h02033"), _T_26) @[Lookup.scala 31:38]
    node _T_28 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_29 = eq(UInt<14>("h03033"), _T_28) @[Lookup.scala 31:38]
    node _T_30 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_31 = eq(UInt<15>("h04033"), _T_30) @[Lookup.scala 31:38]
    node _T_32 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_33 = eq(UInt<15>("h05033"), _T_32) @[Lookup.scala 31:38]
    node _T_34 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_35 = eq(UInt<31>("h040005033"), _T_34) @[Lookup.scala 31:38]
    node _T_36 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_37 = eq(UInt<15>("h06033"), _T_36) @[Lookup.scala 31:38]
    node _T_38 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_39 = eq(UInt<15>("h07033"), _T_38) @[Lookup.scala 31:38]
    node _T_40 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_41 = eq(UInt<2>("h03"), _T_40) @[Lookup.scala 31:38]
    node _T_42 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_43 = eq(UInt<13>("h01003"), _T_42) @[Lookup.scala 31:38]
    node _T_44 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_45 = eq(UInt<14>("h02003"), _T_44) @[Lookup.scala 31:38]
    node _T_46 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_47 = eq(UInt<15>("h04003"), _T_46) @[Lookup.scala 31:38]
    node _T_48 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_49 = eq(UInt<15>("h05003"), _T_48) @[Lookup.scala 31:38]
    node _T_50 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_51 = eq(UInt<6>("h023"), _T_50) @[Lookup.scala 31:38]
    node _T_52 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_53 = eq(UInt<13>("h01023"), _T_52) @[Lookup.scala 31:38]
    node _T_54 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_55 = eq(UInt<14>("h02023"), _T_54) @[Lookup.scala 31:38]
    node _T_56 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_57 = eq(UInt<7>("h063"), _T_56) @[Lookup.scala 31:38]
    node _T_58 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_59 = eq(UInt<13>("h01063"), _T_58) @[Lookup.scala 31:38]
    node _T_60 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_61 = eq(UInt<15>("h04063"), _T_60) @[Lookup.scala 31:38]
    node _T_62 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_63 = eq(UInt<15>("h05063"), _T_62) @[Lookup.scala 31:38]
    node _T_64 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_65 = eq(UInt<15>("h06063"), _T_64) @[Lookup.scala 31:38]
    node _T_66 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_67 = eq(UInt<15>("h07063"), _T_66) @[Lookup.scala 31:38]
    node _T_68 = and(inst, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_69 = eq(UInt<6>("h037"), _T_68) @[Lookup.scala 31:38]
    node _T_70 = and(inst, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_71 = eq(UInt<5>("h017"), _T_70) @[Lookup.scala 31:38]
    node _T_72 = and(inst, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_73 = eq(UInt<7>("h06f"), _T_72) @[Lookup.scala 31:38]
    node _T_74 = and(inst, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_75 = eq(UInt<7>("h067"), _T_74) @[Lookup.scala 31:38]
    node _T_76 = and(inst, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_77 = eq(UInt<7>("h073"), _T_76) @[Lookup.scala 31:38]
    node _T_78 = and(inst, UInt<32>("h0f00fffff")) @[Lookup.scala 31:38]
    node _T_79 = eq(UInt<4>("h0f"), _T_78) @[Lookup.scala 31:38]
    node _T_80 = and(inst, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_81 = eq(UInt<13>("h0100f"), _T_80) @[Lookup.scala 31:38]
    node _T_82 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_83 = eq(UInt<26>("h02000033"), _T_82) @[Lookup.scala 31:38]
    node _T_84 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_85 = eq(UInt<26>("h02001033"), _T_84) @[Lookup.scala 31:38]
    node _T_86 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_87 = eq(UInt<26>("h02002033"), _T_86) @[Lookup.scala 31:38]
    node _T_88 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_89 = eq(UInt<26>("h02004033"), _T_88) @[Lookup.scala 31:38]
    node _T_90 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_91 = eq(UInt<26>("h02005033"), _T_90) @[Lookup.scala 31:38]
    node _T_92 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_93 = eq(UInt<26>("h02006033"), _T_92) @[Lookup.scala 31:38]
    node _T_94 = and(inst, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_95 = eq(UInt<26>("h02007033"), _T_94) @[Lookup.scala 31:38]
    node _T_96 = mux(_T_95, UInt<4>("h01"), UInt<4>("h00")) @[Lookup.scala 33:37]
    node _T_97 = mux(_T_93, UInt<4>("h01"), _T_96) @[Lookup.scala 33:37]
    node _T_98 = mux(_T_91, UInt<4>("h01"), _T_97) @[Lookup.scala 33:37]
    node _T_99 = mux(_T_89, UInt<4>("h01"), _T_98) @[Lookup.scala 33:37]
    node _T_100 = mux(_T_87, UInt<4>("h01"), _T_99) @[Lookup.scala 33:37]
    node _T_101 = mux(_T_85, UInt<4>("h01"), _T_100) @[Lookup.scala 33:37]
    node _T_102 = mux(_T_83, UInt<4>("h01"), _T_101) @[Lookup.scala 33:37]
    node _T_103 = mux(_T_81, UInt<4>("h08"), _T_102) @[Lookup.scala 33:37]
    node _T_104 = mux(_T_79, UInt<4>("h08"), _T_103) @[Lookup.scala 33:37]
    node _T_105 = mux(_T_77, UInt<4>("h07"), _T_104) @[Lookup.scala 33:37]
    node _T_106 = mux(_T_75, UInt<4>("h02"), _T_105) @[Lookup.scala 33:37]
    node _T_107 = mux(_T_73, UInt<4>("h06"), _T_106) @[Lookup.scala 33:37]
    node _T_108 = mux(_T_71, UInt<4>("h05"), _T_107) @[Lookup.scala 33:37]
    node _T_109 = mux(_T_69, UInt<4>("h05"), _T_108) @[Lookup.scala 33:37]
    node _T_110 = mux(_T_67, UInt<4>("h04"), _T_109) @[Lookup.scala 33:37]
    node _T_111 = mux(_T_65, UInt<4>("h04"), _T_110) @[Lookup.scala 33:37]
    node _T_112 = mux(_T_63, UInt<4>("h04"), _T_111) @[Lookup.scala 33:37]
    node _T_113 = mux(_T_61, UInt<4>("h04"), _T_112) @[Lookup.scala 33:37]
    node _T_114 = mux(_T_59, UInt<4>("h04"), _T_113) @[Lookup.scala 33:37]
    node _T_115 = mux(_T_57, UInt<4>("h04"), _T_114) @[Lookup.scala 33:37]
    node _T_116 = mux(_T_55, UInt<4>("h03"), _T_115) @[Lookup.scala 33:37]
    node _T_117 = mux(_T_53, UInt<4>("h03"), _T_116) @[Lookup.scala 33:37]
    node _T_118 = mux(_T_51, UInt<4>("h03"), _T_117) @[Lookup.scala 33:37]
    node _T_119 = mux(_T_49, UInt<4>("h02"), _T_118) @[Lookup.scala 33:37]
    node _T_120 = mux(_T_47, UInt<4>("h02"), _T_119) @[Lookup.scala 33:37]
    node _T_121 = mux(_T_45, UInt<4>("h02"), _T_120) @[Lookup.scala 33:37]
    node _T_122 = mux(_T_43, UInt<4>("h02"), _T_121) @[Lookup.scala 33:37]
    node _T_123 = mux(_T_41, UInt<4>("h02"), _T_122) @[Lookup.scala 33:37]
    node _T_124 = mux(_T_39, UInt<4>("h01"), _T_123) @[Lookup.scala 33:37]
    node _T_125 = mux(_T_37, UInt<4>("h01"), _T_124) @[Lookup.scala 33:37]
    node _T_126 = mux(_T_35, UInt<4>("h01"), _T_125) @[Lookup.scala 33:37]
    node _T_127 = mux(_T_33, UInt<4>("h01"), _T_126) @[Lookup.scala 33:37]
    node _T_128 = mux(_T_31, UInt<4>("h01"), _T_127) @[Lookup.scala 33:37]
    node _T_129 = mux(_T_29, UInt<4>("h01"), _T_128) @[Lookup.scala 33:37]
    node _T_130 = mux(_T_27, UInt<4>("h01"), _T_129) @[Lookup.scala 33:37]
    node _T_131 = mux(_T_25, UInt<4>("h01"), _T_130) @[Lookup.scala 33:37]
    node _T_132 = mux(_T_23, UInt<4>("h01"), _T_131) @[Lookup.scala 33:37]
    node _T_133 = mux(_T_21, UInt<4>("h01"), _T_132) @[Lookup.scala 33:37]
    node _T_134 = mux(_T_19, UInt<4>("h02"), _T_133) @[Lookup.scala 33:37]
    node _T_135 = mux(_T_17, UInt<4>("h02"), _T_134) @[Lookup.scala 33:37]
    node _T_136 = mux(_T_15, UInt<4>("h02"), _T_135) @[Lookup.scala 33:37]
    node _T_137 = mux(_T_13, UInt<4>("h02"), _T_136) @[Lookup.scala 33:37]
    node _T_138 = mux(_T_11, UInt<4>("h02"), _T_137) @[Lookup.scala 33:37]
    node _T_139 = mux(_T_9, UInt<4>("h02"), _T_138) @[Lookup.scala 33:37]
    node _T_140 = mux(_T_7, UInt<4>("h02"), _T_139) @[Lookup.scala 33:37]
    node _T_141 = mux(_T_5, UInt<4>("h02"), _T_140) @[Lookup.scala 33:37]
    node decRes_0 = mux(_T_3, UInt<4>("h02"), _T_141) @[Lookup.scala 33:37]
    node _T_142 = mux(_T_95, UInt<5>("h012"), UInt<5>("h00")) @[Lookup.scala 33:37]
    node _T_143 = mux(_T_93, UInt<5>("h011"), _T_142) @[Lookup.scala 33:37]
    node _T_144 = mux(_T_91, UInt<5>("h010"), _T_143) @[Lookup.scala 33:37]
    node _T_145 = mux(_T_89, UInt<5>("h0f"), _T_144) @[Lookup.scala 33:37]
    node _T_146 = mux(_T_87, UInt<5>("h0d"), _T_145) @[Lookup.scala 33:37]
    node _T_147 = mux(_T_85, UInt<5>("h0c"), _T_146) @[Lookup.scala 33:37]
    node _T_148 = mux(_T_83, UInt<5>("h0b"), _T_147) @[Lookup.scala 33:37]
    node _T_149 = mux(_T_81, UInt<5>("h00"), _T_148) @[Lookup.scala 33:37]
    node _T_150 = mux(_T_79, UInt<5>("h00"), _T_149) @[Lookup.scala 33:37]
    node _T_151 = mux(_T_77, UInt<5>("h00"), _T_150) @[Lookup.scala 33:37]
    node _T_152 = mux(_T_75, UInt<5>("h0a"), _T_151) @[Lookup.scala 33:37]
    node _T_153 = mux(_T_73, UInt<5>("h00"), _T_152) @[Lookup.scala 33:37]
    node _T_154 = mux(_T_71, UInt<1>("h01"), _T_153) @[Lookup.scala 33:37]
    node _T_155 = mux(_T_69, UInt<1>("h00"), _T_154) @[Lookup.scala 33:37]
    node _T_156 = mux(_T_67, UInt<3>("h07"), _T_155) @[Lookup.scala 33:37]
    node _T_157 = mux(_T_65, UInt<4>("h09"), _T_156) @[Lookup.scala 33:37]
    node _T_158 = mux(_T_63, UInt<3>("h06"), _T_157) @[Lookup.scala 33:37]
    node _T_159 = mux(_T_61, UInt<4>("h08"), _T_158) @[Lookup.scala 33:37]
    node _T_160 = mux(_T_59, UInt<4>("h0a"), _T_159) @[Lookup.scala 33:37]
    node _T_161 = mux(_T_57, UInt<3>("h04"), _T_160) @[Lookup.scala 33:37]
    node _T_162 = mux(_T_55, UInt<5>("h014"), _T_161) @[Lookup.scala 33:37]
    node _T_163 = mux(_T_53, UInt<5>("h015"), _T_162) @[Lookup.scala 33:37]
    node _T_164 = mux(_T_51, UInt<5>("h016"), _T_163) @[Lookup.scala 33:37]
    node _T_165 = mux(_T_49, UInt<5>("h01b"), _T_164) @[Lookup.scala 33:37]
    node _T_166 = mux(_T_47, UInt<5>("h01d"), _T_165) @[Lookup.scala 33:37]
    node _T_167 = mux(_T_45, UInt<5>("h018"), _T_166) @[Lookup.scala 33:37]
    node _T_168 = mux(_T_43, UInt<5>("h01a"), _T_167) @[Lookup.scala 33:37]
    node _T_169 = mux(_T_41, UInt<5>("h01c"), _T_168) @[Lookup.scala 33:37]
    node _T_170 = mux(_T_39, UInt<5>("h06"), _T_169) @[Lookup.scala 33:37]
    node _T_171 = mux(_T_37, UInt<5>("h05"), _T_170) @[Lookup.scala 33:37]
    node _T_172 = mux(_T_35, UInt<5>("h09"), _T_171) @[Lookup.scala 33:37]
    node _T_173 = mux(_T_33, UInt<5>("h08"), _T_172) @[Lookup.scala 33:37]
    node _T_174 = mux(_T_31, UInt<5>("h04"), _T_173) @[Lookup.scala 33:37]
    node _T_175 = mux(_T_29, UInt<5>("h03"), _T_174) @[Lookup.scala 33:37]
    node _T_176 = mux(_T_27, UInt<5>("h02"), _T_175) @[Lookup.scala 33:37]
    node _T_177 = mux(_T_25, UInt<5>("h07"), _T_176) @[Lookup.scala 33:37]
    node _T_178 = mux(_T_23, UInt<5>("h01"), _T_177) @[Lookup.scala 33:37]
    node _T_179 = mux(_T_21, UInt<5>("h00"), _T_178) @[Lookup.scala 33:37]
    node _T_180 = mux(_T_19, UInt<5>("h09"), _T_179) @[Lookup.scala 33:37]
    node _T_181 = mux(_T_17, UInt<5>("h08"), _T_180) @[Lookup.scala 33:37]
    node _T_182 = mux(_T_15, UInt<5>("h07"), _T_181) @[Lookup.scala 33:37]
    node _T_183 = mux(_T_13, UInt<5>("h06"), _T_182) @[Lookup.scala 33:37]
    node _T_184 = mux(_T_11, UInt<5>("h05"), _T_183) @[Lookup.scala 33:37]
    node _T_185 = mux(_T_9, UInt<5>("h04"), _T_184) @[Lookup.scala 33:37]
    node _T_186 = mux(_T_7, UInt<5>("h03"), _T_185) @[Lookup.scala 33:37]
    node _T_187 = mux(_T_5, UInt<5>("h02"), _T_186) @[Lookup.scala 33:37]
    node decRes_1 = mux(_T_3, UInt<5>("h00"), _T_187) @[Lookup.scala 33:37]
    node rs1Addr = bits(inst, 19, 15) @[ID.scala 65:22]
    node rs2Addr = bits(inst, 24, 20) @[ID.scala 66:22]
    node rdAddr = bits(inst, 11, 7) @[ID.scala 67:22]
    node csrAddr = bits(inst, 31, 20) @[ID.scala 68:22]
    wire imm : SInt<32> @[ID.scala 69:22]
    io.reg.read1.addr <= rs1Addr @[ID.scala 72:21]
    io.reg.read2.addr <= rs2Addr @[ID.scala 73:21]
    io.csr.addr <= csrAddr @[ID.scala 74:15]
    node _T_188 = eq(rs1Addr, UInt<1>("h00")) @[ID.scala 78:14]
    node _T_189 = eq(rs1Addr, io.exWrRegOp.addr) @[ID.scala 79:14]
    node _T_190 = eq(rs1Addr, io.memWrRegOp.addr) @[ID.scala 80:14]
    node _T_191 = mux(_T_190, io.memWrRegOp.data, io.reg.read1.data) @[Mux.scala 47:69]
    node _T_192 = mux(_T_189, io.exWrRegOp.data, _T_191) @[Mux.scala 47:69]
    node rs1Val = mux(_T_188, UInt<1>("h00"), _T_192) @[Mux.scala 47:69]
    node _T_193 = eq(rs2Addr, UInt<1>("h00")) @[ID.scala 83:14]
    node _T_194 = eq(rs2Addr, io.exWrRegOp.addr) @[ID.scala 84:14]
    node _T_195 = eq(rs2Addr, io.memWrRegOp.addr) @[ID.scala 85:14]
    node _T_196 = mux(_T_195, io.memWrRegOp.data, io.reg.read2.data) @[Mux.scala 47:69]
    node _T_197 = mux(_T_194, io.exWrRegOp.data, _T_196) @[Mux.scala 47:69]
    node rs2Val = mux(_T_193, UInt<1>("h00"), _T_197) @[Mux.scala 47:69]
    node _T_198 = eq(csrAddr, io.exWrCSROp.addr) @[ID.scala 88:14]
    node _T_199 = and(_T_198, io.exWrCSROp.valid) @[ID.scala 88:36]
    node _T_200 = eq(csrAddr, io.memWrCSROp.addr) @[ID.scala 89:14]
    node _T_201 = and(_T_200, io.memWrCSROp.valid) @[ID.scala 89:37]
    node _T_202 = mux(_T_201, io.memWrCSROp.data, io.csr.rdata) @[Mux.scala 47:69]
    node csrVal = mux(_T_199, io.exWrCSROp.data, _T_202) @[Mux.scala 47:69]
    io.debug.pc <= excep.pc @[ID.scala 94:8]
    io.debug.imm <= imm @[ID.scala 95:9]
    io.debug.bt <= UInt<1>("h00") @[ID.scala 96:8]
    io.debug.l <= UInt<1>("h00") @[ID.scala 97:7]
    io.debug.type_ <= decRes_0 @[ID.scala 98:11]
    io.debug.opt <= decRes_1 @[ID.scala 99:9]
    wire _T_203 : {valid : UInt<1>, bits : UInt<32>} @[ID.scala 102:32]
    _T_203.bits <= UInt<32>("h00") @[ID.scala 102:32]
    _T_203.valid <= UInt<1>("h00") @[ID.scala 102:32]
    io.iff.branch.bits <= _T_203.bits @[ID.scala 102:17]
    io.iff.branch.valid <= _T_203.valid @[ID.scala 102:17]
    wire _T_204 : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>} @[ID.scala 103:30]
    _T_204.opt <= UInt<5>("h00") @[ID.scala 103:30]
    _T_204.rd2 <= UInt<32>("h00") @[ID.scala 103:30]
    _T_204.rd1 <= UInt<32>("h00") @[ID.scala 103:30]
    io.ex.aluOp.opt <= _T_204.opt @[ID.scala 103:15]
    io.ex.aluOp.rd2 <= _T_204.rd2 @[ID.scala 103:15]
    io.ex.aluOp.rd1 <= _T_204.rd1 @[ID.scala 103:15]
    io.ex.aluOp.opt <= decRes_1 @[ID.scala 104:19]
    wire _T_205 : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>} @[ID.scala 105:32]
    _T_205.data <= UInt<32>("h00") @[ID.scala 105:32]
    _T_205.addr <= UInt<12>("h00") @[ID.scala 105:32]
    _T_205.valid <= UInt<1>("h00") @[ID.scala 105:32]
    io.ex.wrCSROp.data <= _T_205.data @[ID.scala 105:17]
    io.ex.wrCSROp.addr <= _T_205.addr @[ID.scala 105:17]
    io.ex.wrCSROp.valid <= _T_205.valid @[ID.scala 105:17]
    wire _T_206 : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>} @[ID.scala 106:32]
    _T_206.rdy <= UInt<1>("h00") @[ID.scala 106:32]
    _T_206.data <= UInt<32>("h00") @[ID.scala 106:32]
    _T_206.addr <= UInt<5>("h00") @[ID.scala 106:32]
    io.ex.wrRegOp.rdy <= _T_206.rdy @[ID.scala 106:17]
    io.ex.wrRegOp.data <= _T_206.data @[ID.scala 106:17]
    io.ex.wrRegOp.addr <= _T_206.addr @[ID.scala 106:17]
    io.ex.excep.valid_inst <= excep.valid_inst @[ID.scala 107:15]
    io.ex.excep.pc <= excep.pc @[ID.scala 107:15]
    io.ex.excep.value <= excep.value @[ID.scala 107:15]
    io.ex.excep.code <= excep.code @[ID.scala 107:15]
    io.ex.excep.valid <= excep.valid @[ID.scala 107:15]
    node _T_207 = eq(stall, UInt<1>("h00")) @[ID.scala 108:49]
    node _T_208 = and(excep.valid_inst, _T_207) @[ID.scala 108:46]
    io.ex.excep.valid_inst <= _T_208 @[ID.scala 108:26]
    io.ex.store_data <= UInt<1>("h00") @[ID.scala 109:20]
    imm <= asSInt(UInt<1>("h00")) @[ID.scala 110:7]
    node _T_209 = eq(rs1Addr, io.exWrRegOp.addr) @[ID.scala 118:28]
    node _T_210 = eq(UInt<4>("h01"), decRes_0) @[ID.scala 119:34]
    node _T_211 = eq(UInt<4>("h02"), decRes_0) @[ID.scala 119:34]
    node _T_212 = eq(UInt<4>("h03"), decRes_0) @[ID.scala 119:34]
    node _T_213 = eq(UInt<4>("h04"), decRes_0) @[ID.scala 119:34]
    node _T_214 = or(_T_210, _T_211) @[ID.scala 119:57]
    node _T_215 = or(_T_214, _T_212) @[ID.scala 119:57]
    node _T_216 = or(_T_215, _T_213) @[ID.scala 119:57]
    node rs1Hazard = and(_T_209, _T_216) @[ID.scala 118:51]
    node _T_217 = eq(rs2Addr, io.exWrRegOp.addr) @[ID.scala 120:28]
    node _T_218 = eq(UInt<4>("h01"), decRes_0) @[ID.scala 121:34]
    node _T_219 = eq(UInt<4>("h03"), decRes_0) @[ID.scala 121:34]
    node _T_220 = eq(UInt<4>("h04"), decRes_0) @[ID.scala 121:34]
    node _T_221 = or(_T_218, _T_219) @[ID.scala 121:57]
    node _T_222 = or(_T_221, _T_220) @[ID.scala 121:57]
    node rs2Hazard = and(_T_217, _T_222) @[ID.scala 120:51]
    node _T_223 = eq(io.exWrRegOp.rdy, UInt<1>("h00")) @[ID.scala 122:13]
    node _T_224 = orr(io.exWrRegOp.addr) @[ID.scala 122:54]
    node _T_225 = and(_T_223, _T_224) @[ID.scala 122:32]
    node _T_226 = or(rs1Hazard, rs2Hazard) @[ID.scala 122:73]
    node _T_227 = and(_T_225, _T_226) @[ID.scala 122:59]
    node _T_228 = eq(io.ex.ready, UInt<1>("h00")) @[ID.scala 122:90]
    node _T_229 = or(_T_227, _T_228) @[ID.scala 122:87]
    stall <= _T_229 @[ID.scala 122:9]
    when stall : @[ID.scala 139:16]
      io.ex.wrRegOp.addr <= UInt<1>("h00") @[ID.scala 141:24]
      io.ex.aluOp.opt <= UInt<5>("h00") @[ID.scala 142:21]
      io.iff.branch.valid <= UInt<1>("h00") @[ID.scala 143:25]
      io.iff.ready <= UInt<1>("h00") @[ID.scala 144:18]
      skip @[ID.scala 139:16]
    else : @[ID.scala 145:15]
      io.iff.ready <= UInt<1>("h01") @[ID.scala 146:18]
      node _T_230 = eq(UInt<4>("h01"), decRes_0) @[Conditional.scala 37:30]
      when _T_230 : @[Conditional.scala 40:58]
        io.ex.aluOp.rd1 <= rs1Val @[ID.scala 150:25]
        io.ex.aluOp.rd2 <= rs2Val @[ID.scala 151:25]
        io.ex.wrRegOp.addr <= rdAddr @[ID.scala 152:28]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_231 = eq(UInt<4>("h02"), decRes_0) @[Conditional.scala 37:30]
        when _T_231 : @[Conditional.scala 39:67]
          node _T_232 = bits(inst, 31, 20) @[ID.scala 155:20]
          node _T_233 = asSInt(_T_232) @[ID.scala 155:28]
          imm <= _T_233 @[ID.scala 155:13]
          io.ex.aluOp.rd1 <= rs1Val @[ID.scala 156:25]
          node _T_234 = asUInt(imm) @[ID.scala 157:32]
          io.ex.aluOp.rd2 <= _T_234 @[ID.scala 157:25]
          io.ex.wrRegOp.addr <= rdAddr @[ID.scala 158:28]
          node _T_235 = eq(decRes_1, UInt<5>("h0a")) @[ID.scala 160:35]
          when _T_235 : @[ID.scala 160:53]
            node _T_236 = asUInt(imm) @[ID.scala 161:29]
            node _T_237 = add(_T_236, rs1Val) @[ID.scala 161:36]
            node _T_238 = tail(_T_237, 1) @[ID.scala 161:36]
            node _T_239 = not(UInt<32>("h01")) @[ID.scala 161:49]
            node _T_240 = and(_T_238, _T_239) @[ID.scala 161:46]
            node _T_241 = bits(_T_240, 1, 0) @[ID.scala 127:16]
            node _T_242 = orr(_T_241) @[ID.scala 127:22]
            when _T_242 : @[ID.scala 127:27]
              node _T_243 = eq(excep.valid, UInt<1>("h00")) @[ID.scala 128:12]
              when _T_243 : @[ID.scala 128:26]
                io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 129:27]
                io.ex.excep.value <= _T_240 @[ID.scala 130:27]
                io.ex.excep.code <= UInt<1>("h00") @[ID.scala 131:26]
                skip @[ID.scala 128:26]
              skip @[ID.scala 127:27]
            else : @[ID.scala 133:17]
              io.iff.branch.bits <= _T_240 @[ID.scala 134:26]
              io.iff.branch.valid <= UInt<1>("h01") @[ID.scala 135:27]
              skip @[ID.scala 133:17]
            io.ex.aluOp.rd1 <= excep.pc @[ID.scala 162:27]
            io.ex.aluOp.rd2 <= UInt<3>("h04") @[ID.scala 163:27]
            io.ex.aluOp.opt <= UInt<5>("h00") @[ID.scala 164:27]
            skip @[ID.scala 160:53]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_244 = eq(UInt<4>("h03"), decRes_0) @[Conditional.scala 37:30]
          when _T_244 : @[Conditional.scala 39:67]
            node _T_245 = bits(inst, 31, 25) @[ID.scala 168:24]
            node _T_246 = bits(inst, 11, 7) @[ID.scala 168:37]
            node _T_247 = cat(_T_245, _T_246) @[Cat.scala 29:58]
            node _T_248 = asSInt(_T_247) @[ID.scala 168:45]
            imm <= _T_248 @[ID.scala 168:13]
            io.ex.aluOp.rd1 <= rs1Val @[ID.scala 169:25]
            node _T_249 = asUInt(imm) @[ID.scala 170:32]
            io.ex.aluOp.rd2 <= _T_249 @[ID.scala 170:25]
            io.ex.store_data <= rs2Val @[ID.scala 171:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_250 = eq(UInt<4>("h04"), decRes_0) @[Conditional.scala 37:30]
            when _T_250 : @[Conditional.scala 39:67]
              node _T_251 = bits(decRes_1, 0, 0) @[ID.scala 175:23]
              node _T_252 = lt(rs1Val, rs2Val) @[ID.scala 175:35]
              node _T_253 = asSInt(rs1Val) @[ID.scala 175:52]
              node _T_254 = asSInt(rs2Val) @[ID.scala 175:68]
              node _T_255 = lt(_T_253, _T_254) @[ID.scala 175:59]
              node _T_256 = mux(_T_251, _T_252, _T_255) @[ID.scala 175:20]
              node _T_257 = bits(decRes_1, 0, 0) @[ID.scala 176:23]
              node _T_258 = gt(rs1Val, rs2Val) @[ID.scala 176:35]
              node _T_259 = asSInt(rs1Val) @[ID.scala 176:52]
              node _T_260 = asSInt(rs2Val) @[ID.scala 176:68]
              node _T_261 = gt(_T_259, _T_260) @[ID.scala 176:59]
              node _T_262 = mux(_T_257, _T_258, _T_261) @[ID.scala 176:20]
              node _T_263 = eq(rs1Val, rs2Val) @[ID.scala 177:24]
              node _T_264 = bits(decRes_1, 3, 3) @[ID.scala 178:27]
              node _T_265 = and(_T_256, _T_264) @[ID.scala 178:23]
              node _T_266 = bits(decRes_1, 2, 2) @[ID.scala 178:41]
              node _T_267 = and(_T_263, _T_266) @[ID.scala 178:37]
              node _T_268 = or(_T_265, _T_267) @[ID.scala 178:32]
              node _T_269 = bits(decRes_1, 1, 1) @[ID.scala 178:55]
              node _T_270 = and(_T_262, _T_269) @[ID.scala 178:51]
              node _T_271 = or(_T_268, _T_270) @[ID.scala 178:46]
              node _T_272 = bits(inst, 31, 31) @[ID.scala 180:25]
              node _T_273 = bits(inst, 7, 7) @[ID.scala 180:35]
              node _T_274 = bits(inst, 30, 25) @[ID.scala 180:44]
              node _T_275 = bits(inst, 11, 8) @[ID.scala 180:57]
              node _T_276 = cat(_T_275, UInt<1>("h00")) @[Cat.scala 29:58]
              node _T_277 = cat(_T_272, _T_273) @[Cat.scala 29:58]
              node _T_278 = cat(_T_277, _T_274) @[Cat.scala 29:58]
              node _T_279 = cat(_T_278, _T_276) @[Cat.scala 29:58]
              node _T_280 = asSInt(_T_279) @[ID.scala 180:75]
              imm <= _T_280 @[ID.scala 180:13]
              when _T_271 : @[ID.scala 181:20]
                node _T_281 = asUInt(imm) @[ID.scala 182:33]
                node _T_282 = add(excep.pc, _T_281) @[ID.scala 182:27]
                node _T_283 = tail(_T_282, 1) @[ID.scala 182:27]
                node _T_284 = bits(_T_283, 1, 0) @[ID.scala 127:16]
                node _T_285 = orr(_T_284) @[ID.scala 127:22]
                when _T_285 : @[ID.scala 127:27]
                  node _T_286 = eq(excep.valid, UInt<1>("h00")) @[ID.scala 128:12]
                  when _T_286 : @[ID.scala 128:26]
                    io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 129:27]
                    io.ex.excep.value <= _T_283 @[ID.scala 130:27]
                    io.ex.excep.code <= UInt<1>("h00") @[ID.scala 131:26]
                    skip @[ID.scala 128:26]
                  skip @[ID.scala 127:27]
                else : @[ID.scala 133:17]
                  io.iff.branch.bits <= _T_283 @[ID.scala 134:26]
                  io.iff.branch.valid <= UInt<1>("h01") @[ID.scala 135:27]
                  skip @[ID.scala 133:17]
                skip @[ID.scala 181:20]
              io.debug.bt <= decRes_1 @[ID.scala 185:14]
              io.debug.l <= _T_256 @[ID.scala 186:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_287 = eq(UInt<4>("h05"), decRes_0) @[Conditional.scala 37:30]
              when _T_287 : @[Conditional.scala 39:67]
                node _T_288 = and(inst, UInt<32>("h0fffff000")) @[ID.scala 189:22]
                node _T_289 = asSInt(_T_288) @[ID.scala 189:40]
                imm <= _T_289 @[ID.scala 189:13]
                node _T_290 = asUInt(imm) @[ID.scala 190:32]
                io.ex.aluOp.rd1 <= _T_290 @[ID.scala 190:25]
                node _T_291 = bits(decRes_1, 0, 0) @[ID.scala 192:34]
                node _T_292 = mux(_T_291, excep.pc, UInt<1>("h00")) @[ID.scala 192:31]
                io.ex.aluOp.rd2 <= _T_292 @[ID.scala 192:25]
                io.ex.aluOp.opt <= UInt<5>("h00") @[ID.scala 193:27]
                io.ex.wrRegOp.addr <= rdAddr @[ID.scala 194:28]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_293 = eq(UInt<4>("h06"), decRes_0) @[Conditional.scala 37:30]
                when _T_293 : @[Conditional.scala 39:67]
                  node _T_294 = bits(inst, 31, 31) @[ID.scala 197:24]
                  node _T_295 = bits(inst, 19, 12) @[ID.scala 197:34]
                  node _T_296 = bits(inst, 20, 20) @[ID.scala 197:47]
                  node _T_297 = bits(inst, 30, 21) @[ID.scala 197:57]
                  node _T_298 = cat(_T_297, UInt<1>("h00")) @[Cat.scala 29:58]
                  node _T_299 = cat(_T_294, _T_295) @[Cat.scala 29:58]
                  node _T_300 = cat(_T_299, _T_296) @[Cat.scala 29:58]
                  node _T_301 = cat(_T_300, _T_298) @[Cat.scala 29:58]
                  node _T_302 = asSInt(_T_301) @[ID.scala 197:76]
                  imm <= _T_302 @[ID.scala 197:13]
                  node _T_303 = asUInt(imm) @[ID.scala 198:31]
                  node _T_304 = add(excep.pc, _T_303) @[ID.scala 198:25]
                  node _T_305 = tail(_T_304, 1) @[ID.scala 198:25]
                  node _T_306 = bits(_T_305, 1, 0) @[ID.scala 127:16]
                  node _T_307 = orr(_T_306) @[ID.scala 127:22]
                  when _T_307 : @[ID.scala 127:27]
                    node _T_308 = eq(excep.valid, UInt<1>("h00")) @[ID.scala 128:12]
                    when _T_308 : @[ID.scala 128:26]
                      io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 129:27]
                      io.ex.excep.value <= _T_305 @[ID.scala 130:27]
                      io.ex.excep.code <= UInt<1>("h00") @[ID.scala 131:26]
                      skip @[ID.scala 128:26]
                    skip @[ID.scala 127:27]
                  else : @[ID.scala 133:17]
                    io.iff.branch.bits <= _T_305 @[ID.scala 134:26]
                    io.iff.branch.valid <= UInt<1>("h01") @[ID.scala 135:27]
                    skip @[ID.scala 133:17]
                  io.ex.aluOp.rd1 <= excep.pc @[ID.scala 199:25]
                  io.ex.aluOp.rd2 <= UInt<3>("h04") @[ID.scala 200:25]
                  io.ex.aluOp.opt <= UInt<5>("h00") @[ID.scala 201:25]
                  io.ex.wrRegOp.addr <= rdAddr @[ID.scala 202:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_309 = eq(UInt<4>("h07"), decRes_0) @[Conditional.scala 37:30]
                  when _T_309 : @[Conditional.scala 39:67]
                    node _T_310 = bits(inst, 14, 12) @[ID.scala 205:24]
                    node _T_311 = orr(_T_310) @[ID.scala 207:19]
                    when _T_311 : @[ID.scala 207:24]
                      node _T_312 = bits(_T_310, 1, 0) @[ID.scala 208:26]
                      node _T_313 = bits(_T_310, 2, 2) @[ID.scala 209:31]
                      node _T_314 = mux(_T_313, rs1Addr, rs1Val) @[ID.scala 209:26]
                      node _T_315 = or(csrVal, _T_314) @[ID.scala 212:33]
                      node _T_316 = not(_T_314) @[ID.scala 213:35]
                      node _T_317 = and(csrVal, _T_316) @[ID.scala 213:33]
                      node _T_318 = eq(UInt<2>("h01"), _T_312) @[Mux.scala 80:60]
                      node _T_319 = mux(_T_318, _T_314, UInt<1>("h00")) @[Mux.scala 80:57]
                      node _T_320 = eq(UInt<2>("h02"), _T_312) @[Mux.scala 80:60]
                      node _T_321 = mux(_T_320, _T_315, _T_319) @[Mux.scala 80:57]
                      node _T_322 = eq(UInt<2>("h03"), _T_312) @[Mux.scala 80:60]
                      node _T_323 = mux(_T_322, _T_317, _T_321) @[Mux.scala 80:57]
                      io.ex.wrCSROp.valid <= UInt<1>("h01") @[ID.scala 215:31]
                      io.ex.wrCSROp.addr <= csrAddr @[ID.scala 216:30]
                      io.ex.wrCSROp.data <= _T_323 @[ID.scala 217:30]
                      io.ex.wrRegOp.addr <= rdAddr @[ID.scala 218:30]
                      io.ex.aluOp.rd1 <= csrVal @[ID.scala 219:30]
                      skip @[ID.scala 207:24]
                    else : @[ID.scala 221:59]
                      node _T_324 = bits(inst, 31, 25) @[ID.scala 221:23]
                      node _T_325 = eq(_T_324, UInt<4>("h09")) @[ID.scala 221:31]
                      when _T_325 : @[ID.scala 221:59]
                        node _T_326 = eq(excep.valid, UInt<1>("h00")) @[ID.scala 222:16]
                        when _T_326 : @[ID.scala 222:30]
                          io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 223:31]
                          io.ex.excep.value <= rs1Val @[ID.scala 224:31]
                          node _T_327 = geq(io.csr.prv, UInt<2>("h01")) @[ID.scala 225:48]
                          node _T_328 = eq(rs1Addr, UInt<1>("h00")) @[ID.scala 226:27]
                          node _T_329 = mux(_T_328, UInt<5>("h015"), UInt<5>("h014")) @[ID.scala 226:18]
                          node _T_330 = mux(_T_327, _T_329, UInt<2>("h02")) @[ID.scala 225:36]
                          io.ex.excep.code <= _T_330 @[ID.scala 225:30]
                          skip @[ID.scala 222:30]
                        skip @[ID.scala 221:59]
                      else : @[ID.scala 230:20]
                        node _T_331 = bits(inst, 24, 20) @[ID.scala 231:29]
                        node _T_332 = eq(excep.valid, UInt<1>("h00")) @[ID.scala 232:16]
                        when _T_332 : @[ID.scala 232:30]
                          node _T_333 = eq(UInt<1>("h00"), _T_331) @[Conditional.scala 37:30]
                          when _T_333 : @[Conditional.scala 40:58]
                            io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 235:35]
                            node _T_334 = bits(io.csr.prv, 1, 0) @[Const.scala 131:36]
                            node _T_335 = or(UInt<4>("h08"), _T_334) @[Const.scala 131:31]
                            io.ex.excep.code <= _T_335 @[ID.scala 236:34]
                            skip @[Conditional.scala 40:58]
                          else : @[Conditional.scala 39:67]
                            node _T_336 = eq(UInt<1>("h01"), _T_331) @[Conditional.scala 37:30]
                            when _T_336 : @[Conditional.scala 39:67]
                              io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 239:35]
                              io.ex.excep.code <= UInt<2>("h03") @[ID.scala 240:34]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_337 = eq(UInt<2>("h02"), _T_331) @[Conditional.scala 37:30]
                              when _T_337 : @[Conditional.scala 39:67]
                                node _T_338 = bits(inst, 29, 28) @[ID.scala 243:31]
                                io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 244:35]
                                node _T_339 = geq(io.csr.prv, _T_338) @[ID.scala 245:52]
                                node _T_340 = bits(_T_338, 1, 0) @[Const.scala 132:35]
                                node _T_341 = or(UInt<5>("h010"), _T_340) @[Const.scala 132:30]
                                node _T_342 = mux(_T_339, _T_341, UInt<2>("h02")) @[ID.scala 245:40]
                                io.ex.excep.code <= _T_342 @[ID.scala 245:34]
                                skip @[Conditional.scala 39:67]
                          skip @[ID.scala 232:30]
                        skip @[ID.scala 230:20]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_343 = eq(UInt<4>("h08"), decRes_0) @[Conditional.scala 37:30]
                    when _T_343 : @[Conditional.scala 39:67]
                      node _T_344 = bits(inst, 14, 12) @[ID.scala 254:18]
                      node _T_345 = eq(_T_344, UInt<1>("h01")) @[ID.scala 254:26]
                      when _T_345 : @[ID.scala 254:40]
                        node _T_346 = eq(fenceICnt, UInt<2>("h03")) @[ID.scala 255:26]
                        when _T_346 : @[ID.scala 255:35]
                          fenceICnt <= UInt<1>("h00") @[ID.scala 256:23]
                          skip @[ID.scala 255:35]
                        else : @[ID.scala 258:22]
                          node _T_347 = add(fenceICnt, UInt<1>("h01")) @[ID.scala 259:36]
                          node _T_348 = tail(_T_347, 1) @[ID.scala 259:36]
                          fenceICnt <= _T_348 @[ID.scala 259:23]
                          io.iff.branch.valid <= UInt<1>("h01") @[ID.scala 260:33]
                          io.iff.branch.bits <= excep.pc @[ID.scala 261:32]
                          skip @[ID.scala 258:22]
                        skip @[ID.scala 254:40]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_349 = eq(UInt<4>("h00"), decRes_0) @[Conditional.scala 37:30]
                      when _T_349 : @[Conditional.scala 39:67]
                        node _T_350 = eq(excep.valid, UInt<1>("h00")) @[ID.scala 267:14]
                        when _T_350 : @[ID.scala 267:28]
                          io.ex.excep.valid <= UInt<1>("h01") @[ID.scala 268:29]
                          io.ex.excep.value <= inst @[ID.scala 269:29]
                          io.ex.excep.code <= UInt<2>("h02") @[ID.scala 270:28]
                          skip @[ID.scala 267:28]
                        skip @[Conditional.scala 39:67]
      skip @[ID.scala 145:15]
    
  module EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip id : {aluOp : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, store_data : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip ready : UInt<1>}, mem : {ramOp : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip ready : UInt<1>}, flip flush : UInt<1>}
    
    wire _T : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>} @[EX.scala 18:51]
    _T.opt <= UInt<5>("h00") @[EX.scala 18:51]
    _T.rd2 <= UInt<32>("h00") @[EX.scala 18:51]
    _T.rd1 <= UInt<32>("h00") @[EX.scala 18:51]
    reg alu : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>}, clock with : (reset => (reset, _T)) @[EX.scala 18:20]
    alu.opt <= io.id.aluOp.opt @[EX.scala 18:20]
    alu.rd2 <= io.id.aluOp.rd2 @[EX.scala 18:20]
    alu.rd1 <= io.id.aluOp.rd1 @[EX.scala 18:20]
    node shamt = bits(alu.rd2, 4, 0) @[EX.scala 24:16]
    node _T_1 = add(alu.rd1, alu.rd2) @[EX.scala 28:7]
    node _T_2 = tail(_T_1, 1) @[EX.scala 28:7]
    node _T_3 = add(alu.rd1, alu.rd2) @[EX.scala 30:17]
    node _T_4 = tail(_T_3, 1) @[EX.scala 30:17]
    node _T_5 = sub(alu.rd1, alu.rd2) @[EX.scala 31:17]
    node _T_6 = tail(_T_5, 1) @[EX.scala 31:17]
    node _T_7 = asSInt(alu.rd1) @[EX.scala 32:20]
    node _T_8 = asSInt(alu.rd2) @[EX.scala 32:31]
    node _T_9 = lt(_T_7, _T_8) @[EX.scala 32:27]
    node _T_10 = mux(_T_9, UInt<1>("h01"), UInt<1>("h00")) @[EX.scala 32:17]
    node _T_11 = lt(alu.rd1, alu.rd2) @[EX.scala 33:21]
    node _T_12 = mux(_T_11, UInt<1>("h01"), UInt<1>("h00")) @[EX.scala 33:18]
    node _T_13 = xor(alu.rd1, alu.rd2) @[EX.scala 34:17]
    node _T_14 = or(alu.rd1, alu.rd2) @[EX.scala 35:16]
    node _T_15 = and(alu.rd1, alu.rd2) @[EX.scala 36:17]
    node _T_16 = dshl(alu.rd1, shamt) @[EX.scala 37:17]
    node _T_17 = dshr(alu.rd1, shamt) @[EX.scala 38:17]
    node _T_18 = asSInt(alu.rd1) @[EX.scala 39:17]
    node _T_19 = dshr(_T_18, shamt) @[EX.scala 39:24]
    node _T_20 = asUInt(_T_19) @[EX.scala 39:34]
    node _T_21 = mul(alu.rd1, alu.rd2) @[EX.scala 41:17]
    node _T_22 = bits(_T_21, 31, 0) @[EX.scala 41:21]
    node _T_23 = asSInt(alu.rd1) @[EX.scala 42:18]
    node _T_24 = asSInt(alu.rd2) @[EX.scala 42:29]
    node _T_25 = mul(_T_23, _T_24) @[EX.scala 42:25]
    node _T_26 = bits(_T_25, 63, 32) @[EX.scala 42:36]
    node _T_27 = mul(alu.rd1, alu.rd2) @[EX.scala 43:19]
    node _T_28 = bits(_T_27, 63, 32) @[EX.scala 43:23]
    node _T_29 = asSInt(alu.rd1) @[EX.scala 44:20]
    node _T_30 = cvt(alu.rd2) @[EX.scala 44:27]
    node _T_31 = mul(_T_29, _T_30) @[EX.scala 44:27]
    node _T_32 = tail(_T_31, 1) @[EX.scala 44:27]
    node _T_33 = asSInt(_T_32) @[EX.scala 44:27]
    node _T_34 = bits(_T_33, 63, 32) @[EX.scala 44:31]
    node _T_35 = asSInt(alu.rd1) @[EX.scala 45:17]
    node _T_36 = asSInt(alu.rd2) @[EX.scala 45:28]
    node _T_37 = div(_T_35, _T_36) @[EX.scala 45:24]
    node _T_38 = asUInt(_T_37) @[EX.scala 45:36]
    node _T_39 = div(alu.rd1, alu.rd2) @[EX.scala 46:17]
    node _T_40 = asSInt(alu.rd1) @[EX.scala 47:18]
    node _T_41 = asSInt(alu.rd2) @[EX.scala 47:29]
    node _T_42 = rem(_T_40, _T_41) @[EX.scala 47:25]
    node _T_43 = asUInt(_T_42) @[EX.scala 47:37]
    node _T_44 = rem(alu.rd1, alu.rd2) @[EX.scala 48:17]
    node _T_45 = eq(UInt<5>("h00"), alu.opt) @[Mux.scala 80:60]
    node _T_46 = mux(_T_45, _T_4, _T_2) @[Mux.scala 80:57]
    node _T_47 = eq(UInt<5>("h01"), alu.opt) @[Mux.scala 80:60]
    node _T_48 = mux(_T_47, _T_6, _T_46) @[Mux.scala 80:57]
    node _T_49 = eq(UInt<5>("h02"), alu.opt) @[Mux.scala 80:60]
    node _T_50 = mux(_T_49, _T_10, _T_48) @[Mux.scala 80:57]
    node _T_51 = eq(UInt<5>("h03"), alu.opt) @[Mux.scala 80:60]
    node _T_52 = mux(_T_51, _T_12, _T_50) @[Mux.scala 80:57]
    node _T_53 = eq(UInt<5>("h04"), alu.opt) @[Mux.scala 80:60]
    node _T_54 = mux(_T_53, _T_13, _T_52) @[Mux.scala 80:57]
    node _T_55 = eq(UInt<5>("h05"), alu.opt) @[Mux.scala 80:60]
    node _T_56 = mux(_T_55, _T_14, _T_54) @[Mux.scala 80:57]
    node _T_57 = eq(UInt<5>("h06"), alu.opt) @[Mux.scala 80:60]
    node _T_58 = mux(_T_57, _T_15, _T_56) @[Mux.scala 80:57]
    node _T_59 = eq(UInt<5>("h07"), alu.opt) @[Mux.scala 80:60]
    node _T_60 = mux(_T_59, _T_16, _T_58) @[Mux.scala 80:57]
    node _T_61 = eq(UInt<5>("h08"), alu.opt) @[Mux.scala 80:60]
    node _T_62 = mux(_T_61, _T_17, _T_60) @[Mux.scala 80:57]
    node _T_63 = eq(UInt<5>("h09"), alu.opt) @[Mux.scala 80:60]
    node _T_64 = mux(_T_63, _T_20, _T_62) @[Mux.scala 80:57]
    node _T_65 = eq(UInt<5>("h0b"), alu.opt) @[Mux.scala 80:60]
    node _T_66 = mux(_T_65, _T_22, _T_64) @[Mux.scala 80:57]
    node _T_67 = eq(UInt<5>("h0c"), alu.opt) @[Mux.scala 80:60]
    node _T_68 = mux(_T_67, _T_26, _T_66) @[Mux.scala 80:57]
    node _T_69 = eq(UInt<5>("h0e"), alu.opt) @[Mux.scala 80:60]
    node _T_70 = mux(_T_69, _T_28, _T_68) @[Mux.scala 80:57]
    node _T_71 = eq(UInt<5>("h0d"), alu.opt) @[Mux.scala 80:60]
    node _T_72 = mux(_T_71, _T_34, _T_70) @[Mux.scala 80:57]
    node _T_73 = eq(UInt<5>("h0f"), alu.opt) @[Mux.scala 80:60]
    node _T_74 = mux(_T_73, _T_38, _T_72) @[Mux.scala 80:57]
    node _T_75 = eq(UInt<5>("h010"), alu.opt) @[Mux.scala 80:60]
    node _T_76 = mux(_T_75, _T_39, _T_74) @[Mux.scala 80:57]
    node _T_77 = eq(UInt<5>("h011"), alu.opt) @[Mux.scala 80:60]
    node _T_78 = mux(_T_77, _T_43, _T_76) @[Mux.scala 80:57]
    node _T_79 = eq(UInt<5>("h012"), alu.opt) @[Mux.scala 80:60]
    node aluRes = mux(_T_79, _T_44, _T_78) @[Mux.scala 80:57]
    reg wregAddr : UInt, clock with : (reset => (reset, UInt<5>("h00"))) @[EX.scala 56:27]
    wregAddr <= io.id.wrRegOp.addr @[EX.scala 56:27]
    reg store_data : UInt, clock with : (reset => (reset, UInt<32>("h00"))) @[EX.scala 57:27]
    store_data <= io.id.store_data @[EX.scala 57:27]
    io.mem.wrRegOp.addr <= wregAddr @[EX.scala 59:23]
    io.mem.wrRegOp.data <= aluRes @[EX.scala 60:23]
    node _T_80 = and(alu.opt, UInt<5>("h018")) @[EX.scala 61:31]
    node _T_81 = neq(_T_80, UInt<5>("h018")) @[EX.scala 61:45]
    io.mem.wrRegOp.rdy <= _T_81 @[EX.scala 61:23]
    io.mem.ramOp.addr <= aluRes @[EX.scala 63:21]
    node _T_82 = eq(UInt<5>("h018"), alu.opt) @[Mux.scala 80:60]
    node _T_83 = mux(_T_82, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_84 = eq(UInt<5>("h01c"), alu.opt) @[Mux.scala 80:60]
    node _T_85 = mux(_T_84, UInt<3>("h04"), _T_83) @[Mux.scala 80:57]
    node _T_86 = eq(UInt<5>("h01d"), alu.opt) @[Mux.scala 80:60]
    node _T_87 = mux(_T_86, UInt<3>("h05"), _T_85) @[Mux.scala 80:57]
    node _T_88 = eq(UInt<5>("h01a"), alu.opt) @[Mux.scala 80:60]
    node _T_89 = mux(_T_88, UInt<2>("h02"), _T_87) @[Mux.scala 80:57]
    node _T_90 = eq(UInt<5>("h01b"), alu.opt) @[Mux.scala 80:60]
    node _T_91 = mux(_T_90, UInt<2>("h03"), _T_89) @[Mux.scala 80:57]
    node _T_92 = eq(UInt<5>("h014"), alu.opt) @[Mux.scala 80:60]
    node _T_93 = mux(_T_92, UInt<4>("h09"), _T_91) @[Mux.scala 80:57]
    node _T_94 = eq(UInt<5>("h015"), alu.opt) @[Mux.scala 80:60]
    node _T_95 = mux(_T_94, UInt<4>("h0a"), _T_93) @[Mux.scala 80:57]
    node _T_96 = eq(UInt<5>("h016"), alu.opt) @[Mux.scala 80:60]
    node _T_97 = mux(_T_96, UInt<4>("h0c"), _T_95) @[Mux.scala 80:57]
    io.mem.ramOp.mode <= _T_97 @[EX.scala 64:21]
    io.mem.ramOp.wdata <= store_data @[EX.scala 74:22]
    reg excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, clock @[EX.scala 78:24]
    excep.valid_inst <= io.id.excep.valid_inst @[EX.scala 78:24]
    excep.pc <= io.id.excep.pc @[EX.scala 78:24]
    excep.value <= io.id.excep.value @[EX.scala 78:24]
    excep.code <= io.id.excep.code @[EX.scala 78:24]
    excep.valid <= io.id.excep.valid @[EX.scala 78:24]
    reg wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, clock @[EX.scala 79:24]
    wrCSROp.data <= io.id.wrCSROp.data @[EX.scala 79:24]
    wrCSROp.addr <= io.id.wrCSROp.addr @[EX.scala 79:24]
    wrCSROp.valid <= io.id.wrCSROp.valid @[EX.scala 79:24]
    io.mem.excep.valid_inst <= excep.valid_inst @[EX.scala 80:18]
    io.mem.excep.pc <= excep.pc @[EX.scala 80:18]
    io.mem.excep.value <= excep.value @[EX.scala 80:18]
    io.mem.excep.code <= excep.code @[EX.scala 80:18]
    io.mem.excep.valid <= excep.valid @[EX.scala 80:18]
    io.mem.wrCSROp.data <= wrCSROp.data @[EX.scala 81:18]
    io.mem.wrCSROp.addr <= wrCSROp.addr @[EX.scala 81:18]
    io.mem.wrCSROp.valid <= wrCSROp.valid @[EX.scala 81:18]
    reg countdown : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[EX.scala 85:26]
    node _T_98 = eq(io.mem.ready, UInt<1>("h00")) @[EX.scala 87:15]
    node _T_99 = neq(countdown, UInt<1>("h00")) @[EX.scala 87:42]
    node stall = or(_T_98, _T_99) @[EX.scala 87:29]
    node _T_100 = eq(stall, UInt<1>("h00")) @[EX.scala 89:18]
    io.id.ready <= _T_100 @[EX.scala 89:15]
    node _T_101 = eq(stall, UInt<1>("h00")) @[EX.scala 92:8]
    node _T_102 = geq(io.id.aluOp.opt, UInt<4>("h0b")) @[EX.scala 92:34]
    node _T_103 = and(_T_101, _T_102) @[EX.scala 92:15]
    node _T_104 = leq(io.id.aluOp.opt, UInt<5>("h012")) @[EX.scala 92:61]
    node _T_105 = and(_T_103, _T_104) @[EX.scala 92:42]
    when _T_105 : @[EX.scala 92:70]
      countdown <= UInt<3>("h07") @[EX.scala 93:15]
      skip @[EX.scala 92:70]
    else : @[EX.scala 94:33]
      node _T_106 = neq(countdown, UInt<1>("h00")) @[EX.scala 94:24]
      when _T_106 : @[EX.scala 94:33]
        node _T_107 = sub(countdown, UInt<1>("h01")) @[EX.scala 95:28]
        node _T_108 = tail(_T_107, 1) @[EX.scala 95:28]
        countdown <= _T_108 @[EX.scala 95:15]
        skip @[EX.scala 94:33]
      else : @[EX.scala 96:15]
        countdown <= UInt<1>("h00") @[EX.scala 97:15]
        skip @[EX.scala 96:15]
    when stall : @[EX.scala 100:15]
      alu.opt <= alu.opt @[EX.scala 101:9]
      alu.rd2 <= alu.rd2 @[EX.scala 101:9]
      alu.rd1 <= alu.rd1 @[EX.scala 101:9]
      wregAddr <= wregAddr @[EX.scala 102:14]
      store_data <= store_data @[EX.scala 103:16]
      excep.valid_inst <= excep.valid_inst @[EX.scala 104:11]
      excep.pc <= excep.pc @[EX.scala 104:11]
      excep.value <= excep.value @[EX.scala 104:11]
      excep.code <= excep.code @[EX.scala 104:11]
      excep.valid <= excep.valid @[EX.scala 104:11]
      wrCSROp.data <= wrCSROp.data @[EX.scala 105:13]
      wrCSROp.addr <= wrCSROp.addr @[EX.scala 105:13]
      wrCSROp.valid <= wrCSROp.valid @[EX.scala 105:13]
      skip @[EX.scala 100:15]
    when io.flush : @[EX.scala 108:15]
      alu.opt <= UInt<5>("h00") @[EX.scala 109:9]
      wregAddr <= UInt<1>("h00") @[EX.scala 110:14]
      wrCSROp.valid <= UInt<1>("h00") @[EX.scala 111:19]
      excep.valid <= UInt<1>("h00") @[EX.scala 112:17]
      excep.valid_inst <= UInt<1>("h00") @[EX.scala 113:22]
      skip @[EX.scala 108:15]
    
  module MEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip ex : {ramOp : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip ready : UInt<1>}, mmu : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>, flip pageFault : UInt<1>}, csr : {wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip inter : {valid : UInt<1>, bits : UInt<32>}}, reg : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, flip flush : UInt<1>}
    
    wire _T : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>} @[MEM.scala 17:37]
    _T.wdata <= UInt<32>("h00") @[MEM.scala 17:37]
    _T.mode <= UInt<4>("h00") @[MEM.scala 17:37]
    _T.addr <= UInt<32>("h00") @[MEM.scala 17:37]
    reg ramOp : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>}, clock with : (reset => (reset, _T)) @[MEM.scala 17:24]
    wire _T_1 : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>} @[MEM.scala 18:37]
    _T_1.rdy <= UInt<1>("h00") @[MEM.scala 18:37]
    _T_1.data <= UInt<32>("h00") @[MEM.scala 18:37]
    _T_1.addr <= UInt<5>("h00") @[MEM.scala 18:37]
    reg reg : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, clock with : (reset => (reset, _T_1)) @[MEM.scala 18:24]
    wire _T_2 : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>} @[MEM.scala 19:37]
    _T_2.data <= UInt<32>("h00") @[MEM.scala 19:37]
    _T_2.addr <= UInt<12>("h00") @[MEM.scala 19:37]
    _T_2.valid <= UInt<1>("h00") @[MEM.scala 19:37]
    reg wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, clock with : (reset => (reset, _T_2)) @[MEM.scala 19:24]
    wire _T_3 : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>} @[MEM.scala 20:37]
    _T_3.valid_inst <= UInt<1>("h00") @[MEM.scala 20:37]
    _T_3.pc <= UInt<32>("h00") @[MEM.scala 20:37]
    _T_3.value <= UInt<32>("h00") @[MEM.scala 20:37]
    _T_3.code <= UInt<32>("h00") @[MEM.scala 20:37]
    _T_3.valid <= UInt<1>("h00") @[MEM.scala 20:37]
    reg excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, clock with : (reset => (reset, _T_3)) @[MEM.scala 20:24]
    node _T_4 = neq(io.mmu.mode, UInt<1>("h00")) @[MEM.scala 23:27]
    node _T_5 = eq(io.mmu.ok, UInt<1>("h00")) @[MEM.scala 23:46]
    node stall = and(_T_4, _T_5) @[MEM.scala 23:43]
    node _T_6 = eq(stall, UInt<1>("h00")) @[MEM.scala 24:18]
    io.ex.ready <= _T_6 @[MEM.scala 24:15]
    node _T_7 = eq(stall, UInt<1>("h00")) @[MEM.scala 26:8]
    when _T_7 : @[MEM.scala 26:16]
      ramOp.wdata <= io.ex.ramOp.wdata @[MEM.scala 27:11]
      ramOp.mode <= io.ex.ramOp.mode @[MEM.scala 27:11]
      ramOp.addr <= io.ex.ramOp.addr @[MEM.scala 27:11]
      reg.rdy <= io.ex.wrRegOp.rdy @[MEM.scala 28:9]
      reg.data <= io.ex.wrRegOp.data @[MEM.scala 28:9]
      reg.addr <= io.ex.wrRegOp.addr @[MEM.scala 28:9]
      wrCSROp.data <= io.ex.wrCSROp.data @[MEM.scala 29:13]
      wrCSROp.addr <= io.ex.wrCSROp.addr @[MEM.scala 29:13]
      wrCSROp.valid <= io.ex.wrCSROp.valid @[MEM.scala 29:13]
      excep.valid_inst <= io.ex.excep.valid_inst @[MEM.scala 30:11]
      excep.pc <= io.ex.excep.pc @[MEM.scala 30:11]
      excep.value <= io.ex.excep.value @[MEM.scala 30:11]
      excep.code <= io.ex.excep.code @[MEM.scala 30:11]
      excep.valid <= io.ex.excep.valid @[MEM.scala 30:11]
      node _T_8 = and(io.csr.inter.valid, io.ex.excep.valid_inst) @[MEM.scala 32:29]
      when _T_8 : @[MEM.scala 32:56]
        excep.valid <= UInt<1>("h01") @[MEM.scala 33:19]
        excep.code <= io.csr.inter.bits @[MEM.scala 34:18]
        skip @[MEM.scala 32:56]
      skip @[MEM.scala 26:16]
    io.mmu.addr <= ramOp.addr @[MEM.scala 41:16]
    io.mmu.wdata <= ramOp.wdata @[MEM.scala 42:16]
    io.mmu.mode <= ramOp.mode @[MEM.scala 43:16]
    io.reg.addr <= reg.addr @[MEM.scala 45:15]
    io.reg.rdy <= UInt<1>("h01") @[MEM.scala 46:15]
    node _T_9 = bits(ramOp.mode, 3, 3) @[Const.scala 23:34]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Const.scala 23:32]
    node _T_11 = orr(ramOp.mode) @[Const.scala 23:43]
    node _T_12 = and(_T_10, _T_11) @[Const.scala 23:38]
    node _T_13 = mux(_T_12, io.mmu.rdata, reg.data) @[MEM.scala 47:21]
    io.reg.data <= _T_13 @[MEM.scala 47:15]
    io.csr.wrCSROp.data <= wrCSROp.data @[MEM.scala 49:18]
    io.csr.wrCSROp.addr <= wrCSROp.addr @[MEM.scala 49:18]
    io.csr.wrCSROp.valid <= wrCSROp.valid @[MEM.scala 49:18]
    io.csr.excep.valid_inst <= excep.valid_inst @[MEM.scala 50:16]
    io.csr.excep.pc <= excep.pc @[MEM.scala 50:16]
    io.csr.excep.value <= excep.value @[MEM.scala 50:16]
    io.csr.excep.code <= excep.code @[MEM.scala 50:16]
    io.csr.excep.valid <= excep.valid @[MEM.scala 50:16]
    node _T_14 = eq(excep.valid, UInt<1>("h00")) @[MEM.scala 53:8]
    when _T_14 : @[MEM.scala 53:22]
      node _T_15 = bits(ramOp.mode, 1, 1) @[Const.scala 26:33]
      node _T_16 = bits(ramOp.addr, 0, 0) @[Bundles.scala 48:31]
      node _T_17 = and(_T_15, _T_16) @[Bundles.scala 48:24]
      node _T_18 = bits(ramOp.mode, 2, 0) @[Const.scala 25:33]
      node _T_19 = eq(_T_18, UInt<1>("h01")) @[Const.scala 25:39]
      node _T_20 = bits(ramOp.addr, 1, 0) @[Bundles.scala 49:31]
      node _T_21 = orr(_T_20) @[Bundles.scala 49:37]
      node _T_22 = and(_T_19, _T_21) @[Bundles.scala 49:24]
      node _T_23 = or(_T_17, _T_22) @[Bundles.scala 48:35]
      when _T_23 : @[MEM.scala 56:28]
        io.mmu.mode <= UInt<1>("h00") @[MEM.scala 57:19]
        io.csr.excep.valid <= UInt<1>("h01") @[MEM.scala 58:26]
        io.csr.excep.value <= ramOp.addr @[MEM.scala 59:26]
        node _T_24 = bits(ramOp.mode, 3, 3) @[Const.scala 23:34]
        node _T_25 = eq(_T_24, UInt<1>("h00")) @[Const.scala 23:32]
        node _T_26 = orr(ramOp.mode) @[Const.scala 23:43]
        node _T_27 = and(_T_25, _T_26) @[Const.scala 23:38]
        node _T_28 = mux(_T_27, UInt<3>("h04"), UInt<3>("h06")) @[MEM.scala 60:31]
        io.csr.excep.code <= _T_28 @[MEM.scala 60:25]
        skip @[MEM.scala 56:28]
      when io.mmu.pageFault : @[MEM.scala 64:28]
        io.csr.excep.valid <= UInt<1>("h01") @[MEM.scala 65:26]
        io.csr.excep.value <= ramOp.addr @[MEM.scala 66:26]
        node _T_29 = bits(ramOp.mode, 3, 3) @[Const.scala 23:34]
        node _T_30 = eq(_T_29, UInt<1>("h00")) @[Const.scala 23:32]
        node _T_31 = orr(ramOp.mode) @[Const.scala 23:43]
        node _T_32 = and(_T_30, _T_31) @[Const.scala 23:38]
        node _T_33 = mux(_T_32, UInt<4>("h0d"), UInt<4>("h0f")) @[MEM.scala 67:31]
        io.csr.excep.code <= _T_33 @[MEM.scala 67:25]
        skip @[MEM.scala 64:28]
      skip @[MEM.scala 53:22]
    else : @[MEM.scala 69:15]
      skip @[MEM.scala 69:15]
    when io.csr.excep.valid : @[MEM.scala 74:28]
      io.reg.addr <= UInt<1>("h00") @[MEM.scala 75:17]
      io.csr.wrCSROp.valid <= UInt<1>("h00") @[MEM.scala 76:26]
      skip @[MEM.scala 74:28]
    when excep.valid : @[MEM.scala 79:21]
      io.mmu.mode <= UInt<1>("h00") @[MEM.scala 81:17]
      skip @[MEM.scala 79:21]
    when stall : @[MEM.scala 85:15]
      io.csr.excep.valid_inst <= UInt<1>("h00") @[MEM.scala 86:29]
      io.csr.excep.valid <= UInt<1>("h00") @[MEM.scala 87:24]
      io.csr.wrCSROp.valid <= UInt<1>("h00") @[MEM.scala 88:26]
      io.reg.addr <= UInt<1>("h00") @[MEM.scala 89:17]
      skip @[MEM.scala 85:15]
    when io.flush : @[MEM.scala 93:18]
      excep.valid <= UInt<1>("h00") @[MEM.scala 94:17]
      excep.valid_inst <= UInt<1>("h00") @[MEM.scala 95:22]
      reg.addr <= UInt<1>("h00") @[MEM.scala 96:14]
      wrCSROp.valid <= UInt<1>("h00") @[MEM.scala 97:19]
      ramOp.mode <= UInt<1>("h00") @[MEM.scala 98:16]
      skip @[MEM.scala 93:18]
    
  module RegFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip id : {read1 : {addr : UInt<5>, flip data : UInt<32>}, read2 : {addr : UInt<5>, flip data : UInt<32>}}, flip mem : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, log : UInt<32>[32]}
    
    cmem regs : UInt<32>[32] @[RegFile.scala 14:17]
    infer mport _T = regs[UInt<1>("h00")], clock @[RegFile.scala 15:7]
    _T <= UInt<1>("h00") @[RegFile.scala 15:13]
    infer mport _T_1 = regs[io.id.read1.addr], clock @[RegFile.scala 20:27]
    io.id.read1.data <= _T_1 @[RegFile.scala 20:20]
    infer mport _T_2 = regs[io.id.read2.addr], clock @[RegFile.scala 21:27]
    io.id.read2.data <= _T_2 @[RegFile.scala 21:20]
    node _T_3 = orr(io.mem.addr) @[RegFile.scala 26:14]
    when _T_3 : @[RegFile.scala 26:19]
      infer mport _T_4 = regs[io.mem.addr], clock @[RegFile.scala 27:9]
      _T_4 <= io.mem.data @[RegFile.scala 27:16]
      skip @[RegFile.scala 26:19]
    infer mport _T_5 = regs[UInt<1>("h00")], clock @[RegFile.scala 32:22]
    io.log[0] <= _T_5 @[RegFile.scala 32:15]
    infer mport _T_6 = regs[UInt<1>("h01")], clock @[RegFile.scala 32:22]
    io.log[1] <= _T_6 @[RegFile.scala 32:15]
    infer mport _T_7 = regs[UInt<2>("h02")], clock @[RegFile.scala 32:22]
    io.log[2] <= _T_7 @[RegFile.scala 32:15]
    infer mport _T_8 = regs[UInt<2>("h03")], clock @[RegFile.scala 32:22]
    io.log[3] <= _T_8 @[RegFile.scala 32:15]
    infer mport _T_9 = regs[UInt<3>("h04")], clock @[RegFile.scala 32:22]
    io.log[4] <= _T_9 @[RegFile.scala 32:15]
    infer mport _T_10 = regs[UInt<3>("h05")], clock @[RegFile.scala 32:22]
    io.log[5] <= _T_10 @[RegFile.scala 32:15]
    infer mport _T_11 = regs[UInt<3>("h06")], clock @[RegFile.scala 32:22]
    io.log[6] <= _T_11 @[RegFile.scala 32:15]
    infer mport _T_12 = regs[UInt<3>("h07")], clock @[RegFile.scala 32:22]
    io.log[7] <= _T_12 @[RegFile.scala 32:15]
    infer mport _T_13 = regs[UInt<4>("h08")], clock @[RegFile.scala 32:22]
    io.log[8] <= _T_13 @[RegFile.scala 32:15]
    infer mport _T_14 = regs[UInt<4>("h09")], clock @[RegFile.scala 32:22]
    io.log[9] <= _T_14 @[RegFile.scala 32:15]
    infer mport _T_15 = regs[UInt<4>("h0a")], clock @[RegFile.scala 32:22]
    io.log[10] <= _T_15 @[RegFile.scala 32:15]
    infer mport _T_16 = regs[UInt<4>("h0b")], clock @[RegFile.scala 32:22]
    io.log[11] <= _T_16 @[RegFile.scala 32:15]
    infer mport _T_17 = regs[UInt<4>("h0c")], clock @[RegFile.scala 32:22]
    io.log[12] <= _T_17 @[RegFile.scala 32:15]
    infer mport _T_18 = regs[UInt<4>("h0d")], clock @[RegFile.scala 32:22]
    io.log[13] <= _T_18 @[RegFile.scala 32:15]
    infer mport _T_19 = regs[UInt<4>("h0e")], clock @[RegFile.scala 32:22]
    io.log[14] <= _T_19 @[RegFile.scala 32:15]
    infer mport _T_20 = regs[UInt<4>("h0f")], clock @[RegFile.scala 32:22]
    io.log[15] <= _T_20 @[RegFile.scala 32:15]
    infer mport _T_21 = regs[UInt<5>("h010")], clock @[RegFile.scala 32:22]
    io.log[16] <= _T_21 @[RegFile.scala 32:15]
    infer mport _T_22 = regs[UInt<5>("h011")], clock @[RegFile.scala 32:22]
    io.log[17] <= _T_22 @[RegFile.scala 32:15]
    infer mport _T_23 = regs[UInt<5>("h012")], clock @[RegFile.scala 32:22]
    io.log[18] <= _T_23 @[RegFile.scala 32:15]
    infer mport _T_24 = regs[UInt<5>("h013")], clock @[RegFile.scala 32:22]
    io.log[19] <= _T_24 @[RegFile.scala 32:15]
    infer mport _T_25 = regs[UInt<5>("h014")], clock @[RegFile.scala 32:22]
    io.log[20] <= _T_25 @[RegFile.scala 32:15]
    infer mport _T_26 = regs[UInt<5>("h015")], clock @[RegFile.scala 32:22]
    io.log[21] <= _T_26 @[RegFile.scala 32:15]
    infer mport _T_27 = regs[UInt<5>("h016")], clock @[RegFile.scala 32:22]
    io.log[22] <= _T_27 @[RegFile.scala 32:15]
    infer mport _T_28 = regs[UInt<5>("h017")], clock @[RegFile.scala 32:22]
    io.log[23] <= _T_28 @[RegFile.scala 32:15]
    infer mport _T_29 = regs[UInt<5>("h018")], clock @[RegFile.scala 32:22]
    io.log[24] <= _T_29 @[RegFile.scala 32:15]
    infer mport _T_30 = regs[UInt<5>("h019")], clock @[RegFile.scala 32:22]
    io.log[25] <= _T_30 @[RegFile.scala 32:15]
    infer mport _T_31 = regs[UInt<5>("h01a")], clock @[RegFile.scala 32:22]
    io.log[26] <= _T_31 @[RegFile.scala 32:15]
    infer mport _T_32 = regs[UInt<5>("h01b")], clock @[RegFile.scala 32:22]
    io.log[27] <= _T_32 @[RegFile.scala 32:15]
    infer mport _T_33 = regs[UInt<5>("h01c")], clock @[RegFile.scala 32:22]
    io.log[28] <= _T_33 @[RegFile.scala 32:15]
    infer mport _T_34 = regs[UInt<5>("h01d")], clock @[RegFile.scala 32:22]
    io.log[29] <= _T_34 @[RegFile.scala 32:15]
    infer mport _T_35 = regs[UInt<5>("h01e")], clock @[RegFile.scala 32:22]
    io.log[30] <= _T_35 @[RegFile.scala 32:15]
    infer mport _T_36 = regs[UInt<5>("h01f")], clock @[RegFile.scala 32:22]
    io.log[31] <= _T_36 @[RegFile.scala 32:15]
    
  module PTW : 
    input clock : Clock
    input reset : Reset
    output io : {flip root : {p2 : UInt<10>, p1 : UInt<10>}, flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {p2 : UInt<10>, p1 : UInt<10>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>}}, mem : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}}
    
    reg status : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[PTW.scala 53:23]
    wire _T : {p2 : UInt<10>, p1 : UInt<10>} @[PTW.scala 54:36]
    _T.p1 <= UInt<10>("h00") @[PTW.scala 54:36]
    _T.p2 <= UInt<10>("h00") @[PTW.scala 54:36]
    reg req : {p2 : UInt<10>, p1 : UInt<10>}, clock with : (reset => (reset, _T)) @[PTW.scala 54:23]
    wire pte : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>} @[PTW.scala 55:37]
    wire _T_1 : UInt<32>
    _T_1 <= io.mem.rdata
    node _T_2 = bits(_T_1, 0, 0) @[PTW.scala 55:37]
    pte.V <= _T_2 @[PTW.scala 55:37]
    node _T_3 = bits(_T_1, 1, 1) @[PTW.scala 55:37]
    pte.R <= _T_3 @[PTW.scala 55:37]
    node _T_4 = bits(_T_1, 2, 2) @[PTW.scala 55:37]
    pte.W <= _T_4 @[PTW.scala 55:37]
    node _T_5 = bits(_T_1, 3, 3) @[PTW.scala 55:37]
    pte.X <= _T_5 @[PTW.scala 55:37]
    node _T_6 = bits(_T_1, 4, 4) @[PTW.scala 55:37]
    pte.U <= _T_6 @[PTW.scala 55:37]
    node _T_7 = bits(_T_1, 5, 5) @[PTW.scala 55:37]
    pte.G <= _T_7 @[PTW.scala 55:37]
    node _T_8 = bits(_T_1, 6, 6) @[PTW.scala 55:37]
    pte.A <= _T_8 @[PTW.scala 55:37]
    node _T_9 = bits(_T_1, 7, 7) @[PTW.scala 55:37]
    pte.D <= _T_9 @[PTW.scala 55:37]
    node _T_10 = bits(_T_1, 9, 8) @[PTW.scala 55:37]
    pte.reserve <= _T_10 @[PTW.scala 55:37]
    node _T_11 = bits(_T_1, 19, 10) @[PTW.scala 55:37]
    pte.ppn.p1 <= _T_11 @[PTW.scala 55:37]
    node _T_12 = bits(_T_1, 29, 20) @[PTW.scala 55:37]
    pte.ppn.p2 <= _T_12 @[PTW.scala 55:37]
    node _T_13 = bits(_T_1, 31, 30) @[PTW.scala 55:37]
    pte.zero <= _T_13 @[PTW.scala 55:37]
    node _T_14 = eq(status, UInt<2>("h00")) @[PTW.scala 58:26]
    io.req.ready <= _T_14 @[PTW.scala 58:16]
    io.mem.mode <= UInt<1>("h00") @[PTW.scala 61:15]
    io.mem.addr <= UInt<1>("h00") @[PTW.scala 62:15]
    io.mem.wdata <= UInt<1>("h00") @[PTW.scala 63:16]
    io.rsp.valid <= UInt<1>("h00") @[PTW.scala 64:16]
    wire _T_15 : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>} @[PTW.scala 65:30]
    _T_15.V <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.R <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.W <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.X <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.U <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.G <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.A <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.D <= UInt<1>("h00") @[PTW.scala 65:30]
    _T_15.reserve <= UInt<2>("h00") @[PTW.scala 65:30]
    _T_15.ppn.p1 <= UInt<10>("h00") @[PTW.scala 65:30]
    _T_15.ppn.p2 <= UInt<10>("h00") @[PTW.scala 65:30]
    _T_15.zero <= UInt<2>("h00") @[PTW.scala 65:30]
    io.rsp.bits.V <= _T_15.V @[PTW.scala 65:15]
    io.rsp.bits.R <= _T_15.R @[PTW.scala 65:15]
    io.rsp.bits.W <= _T_15.W @[PTW.scala 65:15]
    io.rsp.bits.X <= _T_15.X @[PTW.scala 65:15]
    io.rsp.bits.U <= _T_15.U @[PTW.scala 65:15]
    io.rsp.bits.G <= _T_15.G @[PTW.scala 65:15]
    io.rsp.bits.A <= _T_15.A @[PTW.scala 65:15]
    io.rsp.bits.D <= _T_15.D @[PTW.scala 65:15]
    io.rsp.bits.reserve <= _T_15.reserve @[PTW.scala 65:15]
    io.rsp.bits.ppn.p1 <= _T_15.ppn.p1 @[PTW.scala 65:15]
    io.rsp.bits.ppn.p2 <= _T_15.ppn.p2 @[PTW.scala 65:15]
    io.rsp.bits.zero <= _T_15.zero @[PTW.scala 65:15]
    node _T_16 = eq(UInt<2>("h00"), status) @[Conditional.scala 37:30]
    when _T_16 : @[Conditional.scala 40:58]
      when io.req.valid : @[PTW.scala 69:26]
        io.mem.mode <= UInt<1>("h01") @[PTW.scala 71:21]
        node _T_17 = dshl(io.req.bits.p2, UInt<2>("h02")) @[PTW.scala 72:54]
        node _T_18 = cat(io.root.p2, io.root.p1) @[PTW.scala 12:47]
        node _T_19 = bits(_T_17, 11, 0) @[PTW.scala 12:62]
        node _T_20 = cat(_T_18, _T_19) @[PTW.scala 12:53]
        io.mem.addr <= _T_20 @[PTW.scala 72:21]
        req.p1 <= io.req.bits.p1 @[PTW.scala 73:13]
        req.p2 <= io.req.bits.p2 @[PTW.scala 73:13]
        status <= UInt<2>("h01") @[PTW.scala 74:16]
        skip @[PTW.scala 69:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_21 = eq(UInt<2>("h01"), status) @[Conditional.scala 37:30]
      when _T_21 : @[Conditional.scala 39:67]
        when io.mem.ok : @[PTW.scala 78:20]
          node _T_22 = eq(pte.V, UInt<1>("h00")) @[PTW.scala 80:14]
          when _T_22 : @[PTW.scala 80:22]
            io.rsp.valid <= UInt<1>("h01") @[PTW.scala 81:24]
            when io.rsp.ready : @[PTW.scala 82:30]
              status <= UInt<2>("h00") @[PTW.scala 83:20]
              skip @[PTW.scala 82:30]
            skip @[PTW.scala 80:22]
          else : @[PTW.scala 85:32]
            node _T_23 = eq(pte.R, UInt<1>("h00")) @[PTW.scala 35:26]
            node _T_24 = and(pte.V, _T_23) @[PTW.scala 35:23]
            node _T_25 = eq(pte.W, UInt<1>("h00")) @[PTW.scala 35:32]
            node _T_26 = and(_T_24, _T_25) @[PTW.scala 35:29]
            node _T_27 = eq(_T_26, UInt<1>("h00")) @[PTW.scala 85:20]
            when _T_27 : @[PTW.scala 85:32]
              io.rsp.valid <= UInt<1>("h01") @[PTW.scala 86:24]
              io.rsp.bits.V <= pte.V @[PTW.scala 87:23]
              io.rsp.bits.R <= pte.R @[PTW.scala 87:23]
              io.rsp.bits.W <= pte.W @[PTW.scala 87:23]
              io.rsp.bits.X <= pte.X @[PTW.scala 87:23]
              io.rsp.bits.U <= pte.U @[PTW.scala 87:23]
              io.rsp.bits.G <= pte.G @[PTW.scala 87:23]
              io.rsp.bits.A <= pte.A @[PTW.scala 87:23]
              io.rsp.bits.D <= pte.D @[PTW.scala 87:23]
              io.rsp.bits.reserve <= pte.reserve @[PTW.scala 87:23]
              io.rsp.bits.ppn.p1 <= pte.ppn.p1 @[PTW.scala 87:23]
              io.rsp.bits.ppn.p2 <= pte.ppn.p2 @[PTW.scala 87:23]
              io.rsp.bits.zero <= pte.zero @[PTW.scala 87:23]
              io.rsp.bits.ppn.p1 <= req.p1 @[PTW.scala 88:30]
              node _T_28 = orr(pte.ppn.p1) @[PTW.scala 89:40]
              node _T_29 = eq(_T_28, UInt<1>("h00")) @[PTW.scala 89:28]
              io.rsp.bits.V <= _T_29 @[PTW.scala 89:25]
              when io.rsp.ready : @[PTW.scala 90:30]
                status <= UInt<2>("h00") @[PTW.scala 91:20]
                skip @[PTW.scala 90:30]
              skip @[PTW.scala 85:32]
            else : @[PTW.scala 93:21]
              io.mem.mode <= UInt<1>("h01") @[PTW.scala 95:23]
              node _T_30 = dshl(req.p1, UInt<2>("h02")) @[PTW.scala 96:48]
              node _T_31 = cat(pte.ppn.p2, pte.ppn.p1) @[PTW.scala 12:47]
              node _T_32 = bits(_T_30, 11, 0) @[PTW.scala 12:62]
              node _T_33 = cat(_T_31, _T_32) @[PTW.scala 12:53]
              io.mem.addr <= _T_33 @[PTW.scala 96:23]
              status <= UInt<2>("h02") @[PTW.scala 97:18]
              skip @[PTW.scala 93:21]
          skip @[PTW.scala 78:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_34 = eq(UInt<2>("h02"), status) @[Conditional.scala 37:30]
        when _T_34 : @[Conditional.scala 39:67]
          when io.mem.ok : @[PTW.scala 102:20]
            io.rsp.valid <= UInt<1>("h01") @[PTW.scala 103:22]
            io.rsp.bits.V <= pte.V @[PTW.scala 104:21]
            io.rsp.bits.R <= pte.R @[PTW.scala 104:21]
            io.rsp.bits.W <= pte.W @[PTW.scala 104:21]
            io.rsp.bits.X <= pte.X @[PTW.scala 104:21]
            io.rsp.bits.U <= pte.U @[PTW.scala 104:21]
            io.rsp.bits.G <= pte.G @[PTW.scala 104:21]
            io.rsp.bits.A <= pte.A @[PTW.scala 104:21]
            io.rsp.bits.D <= pte.D @[PTW.scala 104:21]
            io.rsp.bits.reserve <= pte.reserve @[PTW.scala 104:21]
            io.rsp.bits.ppn.p1 <= pte.ppn.p1 @[PTW.scala 104:21]
            io.rsp.bits.ppn.p2 <= pte.ppn.p2 @[PTW.scala 104:21]
            io.rsp.bits.zero <= pte.zero @[PTW.scala 104:21]
            node _T_35 = or(pte.R, pte.W) @[PTW.scala 36:30]
            node _T_36 = and(pte.V, _T_35) @[PTW.scala 36:24]
            io.rsp.bits.V <= _T_36 @[PTW.scala 105:23]
            when io.rsp.ready : @[PTW.scala 106:28]
              status <= UInt<2>("h00") @[PTW.scala 107:18]
              skip @[PTW.scala 106:28]
            skip @[PTW.scala 102:20]
          skip @[Conditional.scala 39:67]
    
  module TLB : 
    input clock : Clock
    input reset : Reset
    output io : {query : {flip req : {valid : UInt<1>, bits : {p2 : UInt<10>, p1 : UInt<10>}}, rsp : {valid : UInt<1>, bits : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>}}}, query2 : {flip req : {valid : UInt<1>, bits : {p2 : UInt<10>, p1 : UInt<10>}}, rsp : {valid : UInt<1>, bits : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>}}}, modify : {flip mode : UInt<2>, flip vpn : {p2 : UInt<10>, p1 : UInt<10>}, flip pte : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>}}}
    
    cmem entries : {valid : UInt<1>, vpn : {p2 : UInt<10>, p1 : UInt<10>}, pte : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>}}[32] @[TLB.scala 38:20]
    node _T = asUInt(reset) @[TLB.scala 45:14]
    node _T_1 = eq(io.modify.mode, UInt<2>("h03")) @[TLB.scala 45:39]
    node _T_2 = or(_T, _T_1) @[TLB.scala 45:21]
    when _T_2 : @[TLB.scala 45:56]
      infer mport _T_3 = entries[UInt<1>("h00")], clock @[TLB.scala 47:14]
      _T_3.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_4 = entries[UInt<1>("h01")], clock @[TLB.scala 47:14]
      _T_4.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_5 = entries[UInt<2>("h02")], clock @[TLB.scala 47:14]
      _T_5.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_6 = entries[UInt<2>("h03")], clock @[TLB.scala 47:14]
      _T_6.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_7 = entries[UInt<3>("h04")], clock @[TLB.scala 47:14]
      _T_7.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_8 = entries[UInt<3>("h05")], clock @[TLB.scala 47:14]
      _T_8.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_9 = entries[UInt<3>("h06")], clock @[TLB.scala 47:14]
      _T_9.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_10 = entries[UInt<3>("h07")], clock @[TLB.scala 47:14]
      _T_10.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_11 = entries[UInt<4>("h08")], clock @[TLB.scala 47:14]
      _T_11.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_12 = entries[UInt<4>("h09")], clock @[TLB.scala 47:14]
      _T_12.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_13 = entries[UInt<4>("h0a")], clock @[TLB.scala 47:14]
      _T_13.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_14 = entries[UInt<4>("h0b")], clock @[TLB.scala 47:14]
      _T_14.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_15 = entries[UInt<4>("h0c")], clock @[TLB.scala 47:14]
      _T_15.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_16 = entries[UInt<4>("h0d")], clock @[TLB.scala 47:14]
      _T_16.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_17 = entries[UInt<4>("h0e")], clock @[TLB.scala 47:14]
      _T_17.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_18 = entries[UInt<4>("h0f")], clock @[TLB.scala 47:14]
      _T_18.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_19 = entries[UInt<5>("h010")], clock @[TLB.scala 47:14]
      _T_19.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_20 = entries[UInt<5>("h011")], clock @[TLB.scala 47:14]
      _T_20.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_21 = entries[UInt<5>("h012")], clock @[TLB.scala 47:14]
      _T_21.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_22 = entries[UInt<5>("h013")], clock @[TLB.scala 47:14]
      _T_22.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_23 = entries[UInt<5>("h014")], clock @[TLB.scala 47:14]
      _T_23.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_24 = entries[UInt<5>("h015")], clock @[TLB.scala 47:14]
      _T_24.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_25 = entries[UInt<5>("h016")], clock @[TLB.scala 47:14]
      _T_25.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_26 = entries[UInt<5>("h017")], clock @[TLB.scala 47:14]
      _T_26.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_27 = entries[UInt<5>("h018")], clock @[TLB.scala 47:14]
      _T_27.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_28 = entries[UInt<5>("h019")], clock @[TLB.scala 47:14]
      _T_28.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_29 = entries[UInt<5>("h01a")], clock @[TLB.scala 47:14]
      _T_29.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_30 = entries[UInt<5>("h01b")], clock @[TLB.scala 47:14]
      _T_30.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_31 = entries[UInt<5>("h01c")], clock @[TLB.scala 47:14]
      _T_31.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_32 = entries[UInt<5>("h01d")], clock @[TLB.scala 47:14]
      _T_32.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_33 = entries[UInt<5>("h01e")], clock @[TLB.scala 47:14]
      _T_33.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      infer mport _T_34 = entries[UInt<5>("h01f")], clock @[TLB.scala 47:14]
      _T_34.valid <= UInt<1>("h00") @[TLB.scala 47:24]
      skip @[TLB.scala 45:56]
    node _T_35 = asUInt(reset) @[TLB.scala 55:16]
    when _T_35 : @[TLB.scala 55:24]
      io.query.rsp.valid <= io.query.req.valid @[TLB.scala 56:19]
      wire _T_36 : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>} @[TLB.scala 57:33]
      _T_36.V <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.R <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.W <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.X <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.U <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.G <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.A <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.D <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_36.reserve <= UInt<2>("h00") @[TLB.scala 57:33]
      _T_36.ppn.p1 <= UInt<10>("h00") @[TLB.scala 57:33]
      _T_36.ppn.p2 <= UInt<10>("h00") @[TLB.scala 57:33]
      _T_36.zero <= UInt<2>("h00") @[TLB.scala 57:33]
      io.query.rsp.bits.V <= _T_36.V @[TLB.scala 57:18]
      io.query.rsp.bits.R <= _T_36.R @[TLB.scala 57:18]
      io.query.rsp.bits.W <= _T_36.W @[TLB.scala 57:18]
      io.query.rsp.bits.X <= _T_36.X @[TLB.scala 57:18]
      io.query.rsp.bits.U <= _T_36.U @[TLB.scala 57:18]
      io.query.rsp.bits.G <= _T_36.G @[TLB.scala 57:18]
      io.query.rsp.bits.A <= _T_36.A @[TLB.scala 57:18]
      io.query.rsp.bits.D <= _T_36.D @[TLB.scala 57:18]
      io.query.rsp.bits.reserve <= _T_36.reserve @[TLB.scala 57:18]
      io.query.rsp.bits.ppn.p1 <= _T_36.ppn.p1 @[TLB.scala 57:18]
      io.query.rsp.bits.ppn.p2 <= _T_36.ppn.p2 @[TLB.scala 57:18]
      io.query.rsp.bits.zero <= _T_36.zero @[TLB.scala 57:18]
      io.query.rsp.bits.ppn.p1 <= io.query.req.bits.p1 @[TLB.scala 58:22]
      io.query.rsp.bits.ppn.p2 <= io.query.req.bits.p2 @[TLB.scala 58:22]
      io.query.rsp.bits.V <= UInt<1>("h01") @[TLB.scala 59:20]
      io.query.rsp.bits.X <= UInt<1>("h01") @[TLB.scala 60:20]
      io.query.rsp.bits.R <= UInt<1>("h01") @[TLB.scala 61:20]
      io.query.rsp.bits.W <= UInt<1>("h01") @[TLB.scala 62:20]
      io.query.rsp.bits.U <= UInt<1>("h01") @[TLB.scala 63:20]
      skip @[TLB.scala 55:24]
    else : @[TLB.scala 64:17]
      node _T_37 = xor(io.query.req.bits.p2, io.query.req.bits.p1) @[TLB.scala 51:34]
      node _T_38 = bits(_T_37, 4, 0) @[TLB.scala 51:43]
      infer mport _T_39 = entries[_T_38], clock @[TLB.scala 66:26]
      node _T_40 = and(io.query.req.valid, _T_39.valid) @[TLB.scala 67:34]
      node _T_41 = cat(_T_39.vpn.p2, _T_39.vpn.p1) @[TLB.scala 67:62]
      node _T_42 = cat(io.query.req.bits.p2, io.query.req.bits.p1) @[TLB.scala 67:84]
      node _T_43 = eq(_T_41, _T_42) @[TLB.scala 67:69]
      node _T_44 = and(_T_40, _T_43) @[TLB.scala 67:49]
      io.query.rsp.valid <= _T_44 @[TLB.scala 67:19]
      io.query.rsp.bits.V <= _T_39.pte.V @[TLB.scala 68:18]
      io.query.rsp.bits.R <= _T_39.pte.R @[TLB.scala 68:18]
      io.query.rsp.bits.W <= _T_39.pte.W @[TLB.scala 68:18]
      io.query.rsp.bits.X <= _T_39.pte.X @[TLB.scala 68:18]
      io.query.rsp.bits.U <= _T_39.pte.U @[TLB.scala 68:18]
      io.query.rsp.bits.G <= _T_39.pte.G @[TLB.scala 68:18]
      io.query.rsp.bits.A <= _T_39.pte.A @[TLB.scala 68:18]
      io.query.rsp.bits.D <= _T_39.pte.D @[TLB.scala 68:18]
      io.query.rsp.bits.reserve <= _T_39.pte.reserve @[TLB.scala 68:18]
      io.query.rsp.bits.ppn.p1 <= _T_39.pte.ppn.p1 @[TLB.scala 68:18]
      io.query.rsp.bits.ppn.p2 <= _T_39.pte.ppn.p2 @[TLB.scala 68:18]
      io.query.rsp.bits.zero <= _T_39.pte.zero @[TLB.scala 68:18]
      skip @[TLB.scala 64:17]
    node _T_45 = asUInt(reset) @[TLB.scala 55:16]
    when _T_45 : @[TLB.scala 55:24]
      io.query2.rsp.valid <= io.query2.req.valid @[TLB.scala 56:19]
      wire _T_46 : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>} @[TLB.scala 57:33]
      _T_46.V <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.R <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.W <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.X <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.U <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.G <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.A <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.D <= UInt<1>("h00") @[TLB.scala 57:33]
      _T_46.reserve <= UInt<2>("h00") @[TLB.scala 57:33]
      _T_46.ppn.p1 <= UInt<10>("h00") @[TLB.scala 57:33]
      _T_46.ppn.p2 <= UInt<10>("h00") @[TLB.scala 57:33]
      _T_46.zero <= UInt<2>("h00") @[TLB.scala 57:33]
      io.query2.rsp.bits.V <= _T_46.V @[TLB.scala 57:18]
      io.query2.rsp.bits.R <= _T_46.R @[TLB.scala 57:18]
      io.query2.rsp.bits.W <= _T_46.W @[TLB.scala 57:18]
      io.query2.rsp.bits.X <= _T_46.X @[TLB.scala 57:18]
      io.query2.rsp.bits.U <= _T_46.U @[TLB.scala 57:18]
      io.query2.rsp.bits.G <= _T_46.G @[TLB.scala 57:18]
      io.query2.rsp.bits.A <= _T_46.A @[TLB.scala 57:18]
      io.query2.rsp.bits.D <= _T_46.D @[TLB.scala 57:18]
      io.query2.rsp.bits.reserve <= _T_46.reserve @[TLB.scala 57:18]
      io.query2.rsp.bits.ppn.p1 <= _T_46.ppn.p1 @[TLB.scala 57:18]
      io.query2.rsp.bits.ppn.p2 <= _T_46.ppn.p2 @[TLB.scala 57:18]
      io.query2.rsp.bits.zero <= _T_46.zero @[TLB.scala 57:18]
      io.query2.rsp.bits.ppn.p1 <= io.query2.req.bits.p1 @[TLB.scala 58:22]
      io.query2.rsp.bits.ppn.p2 <= io.query2.req.bits.p2 @[TLB.scala 58:22]
      io.query2.rsp.bits.V <= UInt<1>("h01") @[TLB.scala 59:20]
      io.query2.rsp.bits.X <= UInt<1>("h01") @[TLB.scala 60:20]
      io.query2.rsp.bits.R <= UInt<1>("h01") @[TLB.scala 61:20]
      io.query2.rsp.bits.W <= UInt<1>("h01") @[TLB.scala 62:20]
      io.query2.rsp.bits.U <= UInt<1>("h01") @[TLB.scala 63:20]
      skip @[TLB.scala 55:24]
    else : @[TLB.scala 64:17]
      node _T_47 = xor(io.query2.req.bits.p2, io.query2.req.bits.p1) @[TLB.scala 51:34]
      node _T_48 = bits(_T_47, 4, 0) @[TLB.scala 51:43]
      infer mport _T_49 = entries[_T_48], clock @[TLB.scala 66:26]
      node _T_50 = and(io.query2.req.valid, _T_49.valid) @[TLB.scala 67:34]
      node _T_51 = cat(_T_49.vpn.p2, _T_49.vpn.p1) @[TLB.scala 67:62]
      node _T_52 = cat(io.query2.req.bits.p2, io.query2.req.bits.p1) @[TLB.scala 67:84]
      node _T_53 = eq(_T_51, _T_52) @[TLB.scala 67:69]
      node _T_54 = and(_T_50, _T_53) @[TLB.scala 67:49]
      io.query2.rsp.valid <= _T_54 @[TLB.scala 67:19]
      io.query2.rsp.bits.V <= _T_49.pte.V @[TLB.scala 68:18]
      io.query2.rsp.bits.R <= _T_49.pte.R @[TLB.scala 68:18]
      io.query2.rsp.bits.W <= _T_49.pte.W @[TLB.scala 68:18]
      io.query2.rsp.bits.X <= _T_49.pte.X @[TLB.scala 68:18]
      io.query2.rsp.bits.U <= _T_49.pte.U @[TLB.scala 68:18]
      io.query2.rsp.bits.G <= _T_49.pte.G @[TLB.scala 68:18]
      io.query2.rsp.bits.A <= _T_49.pte.A @[TLB.scala 68:18]
      io.query2.rsp.bits.D <= _T_49.pte.D @[TLB.scala 68:18]
      io.query2.rsp.bits.reserve <= _T_49.pte.reserve @[TLB.scala 68:18]
      io.query2.rsp.bits.ppn.p1 <= _T_49.pte.ppn.p1 @[TLB.scala 68:18]
      io.query2.rsp.bits.ppn.p2 <= _T_49.pte.ppn.p2 @[TLB.scala 68:18]
      io.query2.rsp.bits.zero <= _T_49.pte.zero @[TLB.scala 68:18]
      skip @[TLB.scala 64:17]
    node _T_55 = xor(io.modify.vpn.p2, io.modify.vpn.p1) @[TLB.scala 51:34]
    node id = bits(_T_55, 4, 0) @[TLB.scala 51:43]
    node _T_56 = eq(io.modify.mode, UInt<2>("h01")) @[TLB.scala 78:23]
    when _T_56 : @[TLB.scala 78:41]
      infer mport _T_57 = entries[id], clock @[TLB.scala 82:12]
      _T_57.valid <= UInt<1>("h01") @[TLB.scala 82:23]
      infer mport _T_58 = entries[id], clock @[TLB.scala 83:12]
      _T_58.vpn.p1 <= io.modify.vpn.p1 @[TLB.scala 83:21]
      _T_58.vpn.p2 <= io.modify.vpn.p2 @[TLB.scala 83:21]
      infer mport _T_59 = entries[id], clock @[TLB.scala 84:12]
      _T_59.pte.V <= io.modify.pte.V @[TLB.scala 84:21]
      _T_59.pte.R <= io.modify.pte.R @[TLB.scala 84:21]
      _T_59.pte.W <= io.modify.pte.W @[TLB.scala 84:21]
      _T_59.pte.X <= io.modify.pte.X @[TLB.scala 84:21]
      _T_59.pte.U <= io.modify.pte.U @[TLB.scala 84:21]
      _T_59.pte.G <= io.modify.pte.G @[TLB.scala 84:21]
      _T_59.pte.A <= io.modify.pte.A @[TLB.scala 84:21]
      _T_59.pte.D <= io.modify.pte.D @[TLB.scala 84:21]
      _T_59.pte.reserve <= io.modify.pte.reserve @[TLB.scala 84:21]
      _T_59.pte.ppn.p1 <= io.modify.pte.ppn.p1 @[TLB.scala 84:21]
      _T_59.pte.ppn.p2 <= io.modify.pte.ppn.p2 @[TLB.scala 84:21]
      _T_59.pte.zero <= io.modify.pte.zero @[TLB.scala 84:21]
      skip @[TLB.scala 78:41]
    node _T_60 = eq(io.modify.mode, UInt<2>("h02")) @[TLB.scala 88:23]
    when _T_60 : @[TLB.scala 88:41]
      infer mport _T_61 = entries[id], clock @[TLB.scala 89:17]
      node _T_62 = cat(_T_61.vpn.p2, _T_61.vpn.p1) @[TLB.scala 89:26]
      node _T_63 = cat(io.modify.vpn.p2, io.modify.vpn.p1) @[TLB.scala 89:51]
      node _T_64 = eq(_T_62, _T_63) @[TLB.scala 89:33]
      when _T_64 : @[TLB.scala 89:59]
        infer mport _T_65 = entries[id], clock @[TLB.scala 90:14]
        _T_65.valid <= UInt<1>("h00") @[TLB.scala 90:25]
        skip @[TLB.scala 89:59]
      skip @[TLB.scala 88:41]
    
  module NullDev : 
    input clock : Clock
    input reset : Reset
    input io : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}
    
    io.ok <= UInt<1>("h00") @[NullDev.scala 9:9]
    io.rdata <= UInt<1>("h00") @[NullDev.scala 10:12]
    
  module MMU : 
    input clock : Clock
    input reset : Reset
    output io : {flip iff : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>, flip pageFault : UInt<1>}, flip mem : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>, flip pageFault : UInt<1>}, flip csr : {satp : UInt<32>, flush : {one : UInt<1>, all : UInt<1>, addr : UInt<32>}, priv : UInt<2>, mxr : UInt<1>, sum : UInt<1>}, dev : {if_ : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, mem : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}}}
    
    inst ptw of PTW @[MMU.scala 17:19]
    ptw.clock <= clock
    ptw.reset <= reset
    inst tlb of TLB @[MMU.scala 18:19]
    tlb.clock <= clock
    tlb.reset <= reset
    node _T = eq(io.iff.mode, UInt<1>("h00")) @[Bundles.scala 57:20]
    node _T_1 = or(_T, io.iff.ok) @[Bundles.scala 57:36]
    node _T_2 = eq(io.mem.mode, UInt<1>("h00")) @[Bundles.scala 57:20]
    node _T_3 = or(_T_2, io.mem.ok) @[Bundles.scala 57:36]
    node ready = and(_T_1, _T_3) @[MMU.scala 22:28]
    wire _T_4 : {satp : UInt<32>, flush : {one : UInt<1>, all : UInt<1>, addr : UInt<32>}, priv : UInt<2>, mxr : UInt<1>, sum : UInt<1>} @[MMU.scala 24:33]
    _T_4.sum <= UInt<1>("h00") @[MMU.scala 24:33]
    _T_4.mxr <= UInt<1>("h00") @[MMU.scala 24:33]
    _T_4.priv <= UInt<2>("h00") @[MMU.scala 24:33]
    _T_4.flush.addr <= UInt<32>("h00") @[MMU.scala 24:33]
    _T_4.flush.all <= UInt<1>("h00") @[MMU.scala 24:33]
    _T_4.flush.one <= UInt<1>("h00") @[MMU.scala 24:33]
    _T_4.satp <= UInt<32>("h00") @[MMU.scala 24:33]
    reg csr : {satp : UInt<32>, flush : {one : UInt<1>, all : UInt<1>, addr : UInt<32>}, priv : UInt<2>, mxr : UInt<1>, sum : UInt<1>}, clock with : (reset => (reset, _T_4)) @[MMU.scala 24:20]
    when ready : @[MMU.scala 25:15]
      csr.sum <= io.csr.sum @[MMU.scala 26:9]
      csr.mxr <= io.csr.mxr @[MMU.scala 26:9]
      csr.priv <= io.csr.priv @[MMU.scala 26:9]
      csr.flush.addr <= io.csr.flush.addr @[MMU.scala 26:9]
      csr.flush.all <= io.csr.flush.all @[MMU.scala 26:9]
      csr.flush.one <= io.csr.flush.one @[MMU.scala 26:9]
      csr.satp <= io.csr.satp @[MMU.scala 26:9]
      skip @[MMU.scala 25:15]
    wire _T_5 : {one : UInt<1>, all : UInt<1>, addr : UInt<32>} @[MMU.scala 32:39]
    _T_5.addr <= UInt<32>("h00") @[MMU.scala 32:39]
    _T_5.all <= UInt<1>("h00") @[MMU.scala 32:39]
    _T_5.one <= UInt<1>("h00") @[MMU.scala 32:39]
    reg log_flush : {one : UInt<1>, all : UInt<1>, addr : UInt<32>}, clock with : (reset => (reset, _T_5)) @[MMU.scala 32:26]
    node _T_6 = or(io.csr.flush.one, io.csr.flush.all) @[Bundles.scala 68:19]
    when _T_6 : @[MMU.scala 33:28]
      log_flush.addr <= io.csr.flush.addr @[MMU.scala 34:15]
      log_flush.all <= io.csr.flush.all @[MMU.scala 34:15]
      log_flush.one <= io.csr.flush.one @[MMU.scala 34:15]
      skip @[MMU.scala 33:28]
    node _T_7 = or(io.csr.flush.one, io.csr.flush.all) @[Bundles.scala 68:19]
    node flush = mux(_T_7, io.csr.flush, log_flush) @[MMU.scala 37:18]
    node _T_8 = bits(csr.satp, 31, 31) @[MMU.scala 40:24]
    node _T_9 = neq(csr.priv, UInt<2>("h03")) @[MMU.scala 40:41]
    node enable = and(_T_8, _T_9) @[MMU.scala 40:29]
    node _T_10 = eq(enable, UInt<1>("h00")) @[MMU.scala 41:16]
    tlb.reset <= _T_10 @[MMU.scala 41:13]
    node _T_11 = bits(csr.satp, 19, 0) @[MMU.scala 42:26]
    wire _T_12 : {p2 : UInt<10>, p1 : UInt<10>} @[MMU.scala 42:42]
    wire _T_13 : UInt<20>
    _T_13 <= _T_11
    node _T_14 = bits(_T_13, 9, 0) @[MMU.scala 42:42]
    _T_12.p1 <= _T_14 @[MMU.scala 42:42]
    node _T_15 = bits(_T_13, 19, 10) @[MMU.scala 42:42]
    _T_12.p2 <= _T_15 @[MMU.scala 42:42]
    ptw.io.root.p1 <= _T_12.p1 @[MMU.scala 42:15]
    ptw.io.root.p2 <= _T_12.p2 @[MMU.scala 42:15]
    inst null_device of NullDev @[MMU.scala 44:27]
    null_device.clock <= clock
    null_device.reset <= reset
    ptw.io.mem.ok <= null_device.io.ok @[MMU.scala 45:14]
    ptw.io.mem.rdata <= null_device.io.rdata @[MMU.scala 45:14]
    null_device.io.wdata <= ptw.io.mem.wdata @[MMU.scala 45:14]
    null_device.io.mode <= ptw.io.mem.mode @[MMU.scala 45:14]
    null_device.io.addr <= ptw.io.mem.addr @[MMU.scala 45:14]
    node _T_16 = neq(io.iff.mode, UInt<1>("h00")) @[MMU.scala 50:31]
    tlb.io.query.req.valid <= _T_16 @[MMU.scala 50:19]
    wire _T_17 : {p2 : UInt<10>, p1 : UInt<10>} @[PTW.scala 16:32]
    _T_17.p1 <= UInt<10>("h00") @[PTW.scala 16:32]
    _T_17.p2 <= UInt<10>("h00") @[PTW.scala 16:32]
    node _T_18 = bits(io.iff.addr, 31, 12) @[PTW.scala 17:46]
    wire _T_19 : {p2 : UInt<10>, p1 : UInt<10>} @[PTW.scala 17:63]
    wire _T_20 : UInt<20>
    _T_20 <= _T_18
    node _T_21 = bits(_T_20, 9, 0) @[PTW.scala 17:63]
    _T_19.p1 <= _T_21 @[PTW.scala 17:63]
    node _T_22 = bits(_T_20, 19, 10) @[PTW.scala 17:63]
    _T_19.p2 <= _T_22 @[PTW.scala 17:63]
    tlb.io.query.req.bits.p1 <= _T_19.p1 @[MMU.scala 51:18]
    tlb.io.query.req.bits.p2 <= _T_19.p2 @[MMU.scala 51:18]
    io.dev.if_.mode <= io.iff.mode @[MMU.scala 53:14]
    io.dev.if_.wdata <= io.iff.wdata @[MMU.scala 54:15]
    node _T_23 = cat(tlb.io.query.rsp.bits.ppn.p2, tlb.io.query.rsp.bits.ppn.p1) @[PTW.scala 12:47]
    node _T_24 = bits(io.iff.addr, 11, 0) @[PTW.scala 12:62]
    node _T_25 = cat(_T_23, _T_24) @[PTW.scala 12:53]
    io.dev.if_.addr <= _T_25 @[MMU.scala 55:14]
    node _T_26 = and(io.dev.if_.ok, tlb.io.query.rsp.valid) @[MMU.scala 57:22]
    io.iff.ok <= _T_26 @[MMU.scala 57:12]
    io.iff.rdata <= io.dev.if_.rdata @[MMU.scala 58:15]
    node _T_27 = eq(tlb.io.query.rsp.valid, UInt<1>("h00")) @[TLB.scala 9:27]
    node _T_28 = and(tlb.io.query.req.valid, _T_27) @[TLB.scala 9:24]
    when _T_28 : @[MMU.scala 60:20]
      io.dev.if_.mode <= UInt<1>("h00") @[MMU.scala 61:16]
      io.iff.ok <= UInt<1>("h00") @[MMU.scala 62:14]
      skip @[MMU.scala 60:20]
    else : @[MMU.scala 63:31]
      when io.iff.pageFault : @[MMU.scala 63:31]
        io.dev.if_.mode <= UInt<1>("h00") @[MMU.scala 64:16]
        io.dev.if_.wdata <= UInt<1>("h00") @[MMU.scala 65:17]
        io.dev.if_.addr <= UInt<1>("h00") @[MMU.scala 66:16]
        io.iff.ok <= UInt<1>("h01") @[MMU.scala 67:14]
        skip @[MMU.scala 63:31]
    node _T_29 = neq(io.mem.mode, UInt<1>("h00")) @[MMU.scala 50:31]
    tlb.io.query2.req.valid <= _T_29 @[MMU.scala 50:19]
    node _T_30 = bits(io.mem.addr, 31, 12) @[PTW.scala 17:46]
    wire _T_31 : {p2 : UInt<10>, p1 : UInt<10>} @[PTW.scala 17:63]
    wire _T_32 : UInt<20>
    _T_32 <= _T_30
    node _T_33 = bits(_T_32, 9, 0) @[PTW.scala 17:63]
    _T_31.p1 <= _T_33 @[PTW.scala 17:63]
    node _T_34 = bits(_T_32, 19, 10) @[PTW.scala 17:63]
    _T_31.p2 <= _T_34 @[PTW.scala 17:63]
    tlb.io.query2.req.bits.p1 <= _T_31.p1 @[MMU.scala 51:18]
    tlb.io.query2.req.bits.p2 <= _T_31.p2 @[MMU.scala 51:18]
    io.dev.mem.mode <= io.mem.mode @[MMU.scala 53:14]
    io.dev.mem.wdata <= io.mem.wdata @[MMU.scala 54:15]
    node _T_35 = cat(tlb.io.query2.rsp.bits.ppn.p2, tlb.io.query2.rsp.bits.ppn.p1) @[PTW.scala 12:47]
    node _T_36 = bits(io.mem.addr, 11, 0) @[PTW.scala 12:62]
    node _T_37 = cat(_T_35, _T_36) @[PTW.scala 12:53]
    io.dev.mem.addr <= _T_37 @[MMU.scala 55:14]
    node _T_38 = and(io.dev.mem.ok, tlb.io.query2.rsp.valid) @[MMU.scala 57:22]
    io.mem.ok <= _T_38 @[MMU.scala 57:12]
    io.mem.rdata <= io.dev.mem.rdata @[MMU.scala 58:15]
    node _T_39 = eq(tlb.io.query2.rsp.valid, UInt<1>("h00")) @[TLB.scala 9:27]
    node _T_40 = and(tlb.io.query2.req.valid, _T_39) @[TLB.scala 9:24]
    when _T_40 : @[MMU.scala 60:20]
      io.dev.mem.mode <= UInt<1>("h00") @[MMU.scala 61:16]
      io.mem.ok <= UInt<1>("h00") @[MMU.scala 62:14]
      skip @[MMU.scala 60:20]
    else : @[MMU.scala 63:31]
      when io.mem.pageFault : @[MMU.scala 63:31]
        io.dev.mem.mode <= UInt<1>("h00") @[MMU.scala 64:16]
        io.dev.mem.wdata <= UInt<1>("h00") @[MMU.scala 65:17]
        io.dev.mem.addr <= UInt<1>("h00") @[MMU.scala 66:16]
        io.mem.ok <= UInt<1>("h01") @[MMU.scala 67:14]
        skip @[MMU.scala 63:31]
    node _T_41 = and(tlb.io.query.rsp.bits.V, tlb.io.query.rsp.bits.X) @[MMU.scala 76:31]
    node _T_42 = eq(_T_41, UInt<1>("h00")) @[MMU.scala 76:18]
    node _T_43 = eq(csr.priv, UInt<2>("h00")) @[MMU.scala 77:27]
    node _T_44 = eq(tlb.io.query.rsp.bits.U, UInt<1>("h00")) @[MMU.scala 77:41]
    node _T_45 = and(_T_43, _T_44) @[MMU.scala 77:38]
    node _T_46 = and(enable, tlb.io.query.rsp.valid) @[MMU.scala 78:32]
    node _T_47 = neq(io.iff.mode, UInt<1>("h00")) @[MMU.scala 78:60]
    node _T_48 = and(_T_46, _T_47) @[MMU.scala 78:45]
    node _T_49 = or(_T_42, _T_45) @[MMU.scala 78:87]
    node _T_50 = and(_T_48, _T_49) @[MMU.scala 78:76]
    io.iff.pageFault <= _T_50 @[MMU.scala 78:22]
    node _T_51 = bits(io.mem.mode, 3, 3) @[Const.scala 23:34]
    node _T_52 = eq(_T_51, UInt<1>("h00")) @[Const.scala 23:32]
    node _T_53 = orr(io.mem.mode) @[Const.scala 23:43]
    node _T_54 = and(_T_52, _T_53) @[Const.scala 23:38]
    node _T_55 = and(tlb.io.query2.rsp.bits.X, csr.mxr) @[MMU.scala 82:92]
    node _T_56 = or(tlb.io.query2.rsp.bits.R, _T_55) @[MMU.scala 82:78]
    node _T_57 = and(tlb.io.query2.rsp.bits.V, _T_56) @[MMU.scala 82:63]
    node _T_58 = eq(_T_57, UInt<1>("h00")) @[MMU.scala 82:50]
    node _T_59 = and(_T_54, _T_58) @[MMU.scala 82:47]
    node _T_60 = bits(io.mem.mode, 3, 3) @[Const.scala 24:33]
    node _T_61 = and(tlb.io.query2.rsp.bits.V, tlb.io.query2.rsp.bits.W) @[MMU.scala 83:64]
    node _T_62 = eq(_T_61, UInt<1>("h00")) @[MMU.scala 83:51]
    node _T_63 = and(_T_60, _T_62) @[MMU.scala 83:48]
    node _T_64 = eq(csr.priv, UInt<2>("h00")) @[MMU.scala 84:28]
    node _T_65 = eq(tlb.io.query2.rsp.bits.U, UInt<1>("h00")) @[MMU.scala 84:42]
    node _T_66 = and(_T_64, _T_65) @[MMU.scala 84:39]
    node _T_67 = eq(csr.priv, UInt<2>("h01")) @[MMU.scala 85:28]
    node _T_68 = eq(csr.sum, UInt<1>("h00")) @[MMU.scala 85:42]
    node _T_69 = and(_T_67, _T_68) @[MMU.scala 85:39]
    node _T_70 = and(_T_69, tlb.io.query2.rsp.bits.U) @[MMU.scala 85:51]
    node _T_71 = and(enable, tlb.io.query2.rsp.valid) @[MMU.scala 86:32]
    node _T_72 = neq(io.mem.mode, UInt<1>("h00")) @[MMU.scala 86:60]
    node _T_73 = and(_T_71, _T_72) @[MMU.scala 86:45]
    node _T_74 = or(_T_59, _T_63) @[MMU.scala 86:87]
    node _T_75 = or(_T_74, _T_66) @[MMU.scala 86:98]
    node _T_76 = or(_T_75, _T_70) @[MMU.scala 86:108]
    node _T_77 = and(_T_73, _T_76) @[MMU.scala 86:76]
    io.mem.pageFault <= _T_77 @[MMU.scala 86:22]
    reg status : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MMU.scala 100:23]
    wire _T_78 : {p2 : UInt<10>, p1 : UInt<10>} @[MMU.scala 101:37]
    _T_78.p1 <= UInt<10>("h00") @[MMU.scala 101:37]
    _T_78.p2 <= UInt<10>("h00") @[MMU.scala 101:37]
    reg ptw_vpn : {p2 : UInt<10>, p1 : UInt<10>}, clock with : (reset => (reset, _T_78)) @[MMU.scala 101:24]
    ptw.io.req.valid <= UInt<1>("h00") @[MMU.scala 104:20]
    wire _T_79 : {p2 : UInt<10>, p1 : UInt<10>} @[MMU.scala 105:34]
    _T_79.p1 <= UInt<10>("h00") @[MMU.scala 105:34]
    _T_79.p2 <= UInt<10>("h00") @[MMU.scala 105:34]
    ptw.io.req.bits.p1 <= _T_79.p1 @[MMU.scala 105:19]
    ptw.io.req.bits.p2 <= _T_79.p2 @[MMU.scala 105:19]
    ptw.io.rsp.ready <= UInt<1>("h00") @[MMU.scala 106:20]
    wire _T_80 : {flip mode : UInt<2>, flip vpn : {p2 : UInt<10>, p1 : UInt<10>}, flip pte : {zero : UInt<2>, ppn : {p2 : UInt<10>, p1 : UInt<10>}, reserve : UInt<2>, D : UInt<1>, A : UInt<1>, G : UInt<1>, U : UInt<1>, X : UInt<1>, W : UInt<1>, R : UInt<1>, V : UInt<1>}} @[MMU.scala 107:32]
    _T_80.pte.V <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.R <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.W <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.X <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.U <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.G <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.A <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.D <= UInt<1>("h00") @[MMU.scala 107:32]
    _T_80.pte.reserve <= UInt<2>("h00") @[MMU.scala 107:32]
    _T_80.pte.ppn.p1 <= UInt<10>("h00") @[MMU.scala 107:32]
    _T_80.pte.ppn.p2 <= UInt<10>("h00") @[MMU.scala 107:32]
    _T_80.pte.zero <= UInt<2>("h00") @[MMU.scala 107:32]
    _T_80.vpn.p1 <= UInt<10>("h00") @[MMU.scala 107:32]
    _T_80.vpn.p2 <= UInt<10>("h00") @[MMU.scala 107:32]
    _T_80.mode <= UInt<2>("h00") @[MMU.scala 107:32]
    tlb.io.modify.pte.V <= _T_80.pte.V @[MMU.scala 107:17]
    tlb.io.modify.pte.R <= _T_80.pte.R @[MMU.scala 107:17]
    tlb.io.modify.pte.W <= _T_80.pte.W @[MMU.scala 107:17]
    tlb.io.modify.pte.X <= _T_80.pte.X @[MMU.scala 107:17]
    tlb.io.modify.pte.U <= _T_80.pte.U @[MMU.scala 107:17]
    tlb.io.modify.pte.G <= _T_80.pte.G @[MMU.scala 107:17]
    tlb.io.modify.pte.A <= _T_80.pte.A @[MMU.scala 107:17]
    tlb.io.modify.pte.D <= _T_80.pte.D @[MMU.scala 107:17]
    tlb.io.modify.pte.reserve <= _T_80.pte.reserve @[MMU.scala 107:17]
    tlb.io.modify.pte.ppn.p1 <= _T_80.pte.ppn.p1 @[MMU.scala 107:17]
    tlb.io.modify.pte.ppn.p2 <= _T_80.pte.ppn.p2 @[MMU.scala 107:17]
    tlb.io.modify.pte.zero <= _T_80.pte.zero @[MMU.scala 107:17]
    tlb.io.modify.vpn.p1 <= _T_80.vpn.p1 @[MMU.scala 107:17]
    tlb.io.modify.vpn.p2 <= _T_80.vpn.p2 @[MMU.scala 107:17]
    tlb.io.modify.mode <= _T_80.mode @[MMU.scala 107:17]
    node _T_81 = eq(UInt<1>("h00"), status) @[Conditional.scala 37:30]
    when _T_81 : @[Conditional.scala 40:58]
      node _T_82 = eq(io.dev.mem.mode, UInt<1>("h00")) @[Bundles.scala 57:20]
      node _T_83 = or(_T_82, io.dev.mem.ok) @[Bundles.scala 57:36]
      node _T_84 = eq(tlb.io.query.rsp.valid, UInt<1>("h00")) @[TLB.scala 9:27]
      node _T_85 = and(tlb.io.query.req.valid, _T_84) @[TLB.scala 9:24]
      node _T_86 = and(_T_85, _T_83) @[MMU.scala 112:23]
      node _T_87 = and(_T_86, ptw.io.req.ready) @[MMU.scala 112:37]
      when _T_87 : @[MMU.scala 112:58]
        ptw.io.req.valid <= UInt<1>("h01") @[MMU.scala 113:28]
        ptw.io.req.bits.p1 <= tlb.io.query.req.bits.p1 @[MMU.scala 114:27]
        ptw.io.req.bits.p2 <= tlb.io.query.req.bits.p2 @[MMU.scala 114:27]
        status <= UInt<1>("h01") @[MMU.scala 115:18]
        ptw_vpn.p1 <= tlb.io.query.req.bits.p1 @[MMU.scala 116:19]
        ptw_vpn.p2 <= tlb.io.query.req.bits.p2 @[MMU.scala 116:19]
        skip @[MMU.scala 112:58]
      node _T_88 = eq(io.dev.if_.mode, UInt<1>("h00")) @[Bundles.scala 57:20]
      node _T_89 = or(_T_88, io.dev.if_.ok) @[Bundles.scala 57:36]
      node _T_90 = eq(tlb.io.query2.rsp.valid, UInt<1>("h00")) @[TLB.scala 9:27]
      node _T_91 = and(tlb.io.query2.req.valid, _T_90) @[TLB.scala 9:24]
      node _T_92 = and(_T_91, _T_89) @[MMU.scala 112:23]
      node _T_93 = and(_T_92, ptw.io.req.ready) @[MMU.scala 112:37]
      when _T_93 : @[MMU.scala 112:58]
        ptw.io.req.valid <= UInt<1>("h01") @[MMU.scala 113:28]
        ptw.io.req.bits.p1 <= tlb.io.query2.req.bits.p1 @[MMU.scala 114:27]
        ptw.io.req.bits.p2 <= tlb.io.query2.req.bits.p2 @[MMU.scala 114:27]
        status <= UInt<1>("h01") @[MMU.scala 115:18]
        ptw_vpn.p1 <= tlb.io.query2.req.bits.p1 @[MMU.scala 116:19]
        ptw_vpn.p2 <= tlb.io.query2.req.bits.p2 @[MMU.scala 116:19]
        skip @[MMU.scala 112:58]
      when ready : @[MMU.scala 123:19]
        when flush.one : @[MMU.scala 124:25]
          tlb.io.modify.mode <= UInt<2>("h02") @[MMU.scala 125:30]
          node _T_94 = bits(flush.addr, 31, 12) @[PTW.scala 17:46]
          wire _T_95 : {p2 : UInt<10>, p1 : UInt<10>} @[PTW.scala 17:63]
          wire _T_96 : UInt<20>
          _T_96 <= _T_94
          node _T_97 = bits(_T_96, 9, 0) @[PTW.scala 17:63]
          _T_95.p1 <= _T_97 @[PTW.scala 17:63]
          node _T_98 = bits(_T_96, 19, 10) @[PTW.scala 17:63]
          _T_95.p2 <= _T_98 @[PTW.scala 17:63]
          tlb.io.modify.vpn.p1 <= _T_95.p1 @[MMU.scala 126:29]
          tlb.io.modify.vpn.p2 <= _T_95.p2 @[MMU.scala 126:29]
          skip @[MMU.scala 124:25]
        else : @[MMU.scala 127:31]
          when flush.all : @[MMU.scala 127:31]
            tlb.io.modify.mode <= UInt<2>("h03") @[MMU.scala 128:30]
            skip @[MMU.scala 127:31]
        wire _T_99 : {one : UInt<1>, all : UInt<1>, addr : UInt<32>} @[MMU.scala 131:34]
        _T_99.addr <= UInt<32>("h00") @[MMU.scala 131:34]
        _T_99.all <= UInt<1>("h00") @[MMU.scala 131:34]
        _T_99.one <= UInt<1>("h00") @[MMU.scala 131:34]
        log_flush.addr <= _T_99.addr @[MMU.scala 131:19]
        log_flush.all <= _T_99.all @[MMU.scala 131:19]
        log_flush.one <= _T_99.one @[MMU.scala 131:19]
        skip @[MMU.scala 123:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_100 = eq(UInt<1>("h01"), status) @[Conditional.scala 37:30]
      when _T_100 : @[Conditional.scala 39:67]
        reg _T_101 : UInt, clock @[MMU.scala 137:33]
        _T_101 <= ptw.io.mem.addr @[MMU.scala 137:33]
        io.dev.if_.addr <= _T_101 @[MMU.scala 137:23]
        reg _T_102 : UInt, clock @[MMU.scala 138:33]
        _T_102 <= ptw.io.mem.mode @[MMU.scala 138:33]
        io.dev.if_.mode <= _T_102 @[MMU.scala 138:23]
        io.dev.if_.wdata <= UInt<1>("h00") @[MMU.scala 139:24]
        ptw.io.mem.rdata <= io.dev.if_.rdata @[MMU.scala 140:24]
        ptw.io.mem.ok <= io.dev.if_.ok @[MMU.scala 141:21]
        io.iff.ok <= UInt<1>("h00") @[MMU.scala 143:17]
        io.dev.mem.mode <= UInt<1>("h00") @[MMU.scala 144:23]
        io.mem.ok <= UInt<1>("h00") @[MMU.scala 145:17]
        ptw.io.rsp.ready <= UInt<1>("h01") @[MMU.scala 146:24]
        when ptw.io.rsp.valid : @[MMU.scala 147:30]
          tlb.io.modify.mode <= UInt<2>("h01") @[MMU.scala 148:28]
          tlb.io.modify.vpn.p1 <= ptw_vpn.p1 @[MMU.scala 149:27]
          tlb.io.modify.vpn.p2 <= ptw_vpn.p2 @[MMU.scala 149:27]
          tlb.io.modify.pte.V <= ptw.io.rsp.bits.V @[MMU.scala 150:27]
          tlb.io.modify.pte.R <= ptw.io.rsp.bits.R @[MMU.scala 150:27]
          tlb.io.modify.pte.W <= ptw.io.rsp.bits.W @[MMU.scala 150:27]
          tlb.io.modify.pte.X <= ptw.io.rsp.bits.X @[MMU.scala 150:27]
          tlb.io.modify.pte.U <= ptw.io.rsp.bits.U @[MMU.scala 150:27]
          tlb.io.modify.pte.G <= ptw.io.rsp.bits.G @[MMU.scala 150:27]
          tlb.io.modify.pte.A <= ptw.io.rsp.bits.A @[MMU.scala 150:27]
          tlb.io.modify.pte.D <= ptw.io.rsp.bits.D @[MMU.scala 150:27]
          tlb.io.modify.pte.reserve <= ptw.io.rsp.bits.reserve @[MMU.scala 150:27]
          tlb.io.modify.pte.ppn.p1 <= ptw.io.rsp.bits.ppn.p1 @[MMU.scala 150:27]
          tlb.io.modify.pte.ppn.p2 <= ptw.io.rsp.bits.ppn.p2 @[MMU.scala 150:27]
          tlb.io.modify.pte.zero <= ptw.io.rsp.bits.zero @[MMU.scala 150:27]
          status <= UInt<1>("h00") @[MMU.scala 151:16]
          skip @[MMU.scala 147:30]
        skip @[Conditional.scala 39:67]
    reg _dummy1 : UInt<1>, clock @[MMU.scala 157:24]
    _dummy1 <= ptw.io.req.valid @[MMU.scala 157:24]
    
  module CSR : 
    input clock : Clock
    input reset : Reset
    output io : {flip id : {addr : UInt<12>, flip rdata : UInt<32>, flip prv : UInt<2>}, flip mem : {wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}, flip inter : {valid : UInt<1>, bits : UInt<32>}}, mmu : {satp : UInt<32>, flush : {one : UInt<1>, all : UInt<1>, addr : UInt<32>}, priv : UInt<2>, mxr : UInt<1>, sum : UInt<1>}, flush : UInt<1>, csrNewPc : UInt<32>, flip external_inter : {valid : UInt<1>, bits : UInt<32>}}
    
    wire nextPrv : UInt<2> @[CSR.scala 19:21]
    reg prv : UInt, clock with : (reset => (reset, UInt<2>("h03"))) @[CSR.scala 20:24]
    prv <= nextPrv @[CSR.scala 20:24]
    nextPrv <= prv @[CSR.scala 21:11]
    cmem csr : UInt<32>[1024] @[CSR.scala 76:16]
    node _T = asUInt(reset) @[CSR.scala 86:14]
    when _T : @[CSR.scala 86:22]
      infer mport _T_1 = csr[UInt<10>("h0311")], clock @[CSR.scala 88:10]
      _T_1 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_2 = csr[UInt<10>("h0312")], clock @[CSR.scala 88:10]
      _T_2 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_3 = csr[UInt<10>("h0313")], clock @[CSR.scala 88:10]
      _T_3 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_4 = csr[UInt<10>("h0314")], clock @[CSR.scala 88:10]
      _T_4 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_5 = csr[UInt<10>("h0300")], clock @[CSR.scala 88:10]
      _T_5 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_6 = csr[UInt<10>("h0301")], clock @[CSR.scala 88:10]
      _T_6 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_7 = csr[UInt<10>("h0302")], clock @[CSR.scala 88:10]
      _T_7 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_8 = csr[UInt<10>("h0303")], clock @[CSR.scala 88:10]
      _T_8 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_9 = csr[UInt<10>("h0304")], clock @[CSR.scala 88:10]
      _T_9 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_10 = csr[UInt<10>("h0305")], clock @[CSR.scala 88:10]
      _T_10 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_11 = csr[UInt<10>("h0306")], clock @[CSR.scala 88:10]
      _T_11 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_12 = csr[UInt<10>("h0340")], clock @[CSR.scala 88:10]
      _T_12 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_13 = csr[UInt<10>("h0341")], clock @[CSR.scala 88:10]
      _T_13 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_14 = csr[UInt<10>("h0342")], clock @[CSR.scala 88:10]
      _T_14 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_15 = csr[UInt<10>("h0343")], clock @[CSR.scala 88:10]
      _T_15 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_16 = csr[UInt<10>("h0344")], clock @[CSR.scala 88:10]
      _T_16 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_17 = csr[UInt<9>("h0100")], clock @[CSR.scala 88:10]
      _T_17 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_18 = csr[UInt<9>("h0102")], clock @[CSR.scala 88:10]
      _T_18 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_19 = csr[UInt<9>("h0103")], clock @[CSR.scala 88:10]
      _T_19 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_20 = csr[UInt<9>("h0104")], clock @[CSR.scala 88:10]
      _T_20 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_21 = csr[UInt<9>("h0105")], clock @[CSR.scala 88:10]
      _T_21 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_22 = csr[UInt<9>("h0106")], clock @[CSR.scala 88:10]
      _T_22 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_23 = csr[UInt<9>("h0140")], clock @[CSR.scala 88:10]
      _T_23 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_24 = csr[UInt<9>("h0141")], clock @[CSR.scala 88:10]
      _T_24 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_25 = csr[UInt<9>("h0142")], clock @[CSR.scala 88:10]
      _T_25 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_26 = csr[UInt<9>("h0143")], clock @[CSR.scala 88:10]
      _T_26 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_27 = csr[UInt<9>("h0144")], clock @[CSR.scala 88:10]
      _T_27 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_28 = csr[UInt<9>("h0180")], clock @[CSR.scala 88:10]
      _T_28 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_29 = csr[UInt<3>("h05")], clock @[CSR.scala 88:10]
      _T_29 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_30 = csr[UInt<7>("h040")], clock @[CSR.scala 88:10]
      _T_30 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_31 = csr[UInt<7>("h041")], clock @[CSR.scala 88:10]
      _T_31 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_32 = csr[UInt<7>("h042")], clock @[CSR.scala 88:10]
      _T_32 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_33 = csr[UInt<7>("h043")], clock @[CSR.scala 88:10]
      _T_33 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_34 = csr[UInt<7>("h044")], clock @[CSR.scala 88:10]
      _T_34 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_35 = csr[UInt<10>("h0321")], clock @[CSR.scala 88:10]
      _T_35 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_36 = csr[UInt<10>("h0322")], clock @[CSR.scala 88:10]
      _T_36 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_37 = csr[UInt<10>("h01")], clock @[CSR.scala 88:10]
      _T_37 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_38 = csr[UInt<10>("h081")], clock @[CSR.scala 88:10]
      _T_38 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_39 = csr[UInt<10>("h00")], clock @[CSR.scala 88:10]
      _T_39 <= UInt<1>("h00") @[CSR.scala 88:14]
      infer mport _T_40 = csr[UInt<10>("h080")], clock @[CSR.scala 88:10]
      _T_40 <= UInt<1>("h00") @[CSR.scala 88:14]
      skip @[CSR.scala 86:22]
    wire _T_41 : {SD : UInt<1>, zero1 : UInt<8>, TSR : UInt<1>, TW : UInt<1>, TVM : UInt<1>, MXR : UInt<1>, SUM : UInt<1>, MPriv : UInt<1>, XS : UInt<2>, FS : UInt<2>, MPP : UInt<2>, old_HPP : UInt<2>, SPP : UInt<1>, MPIE : UInt<1>, old_HPIE : UInt<1>, SPIE : UInt<1>, UPIE : UInt<1>, MIE : UInt<1>, old_HIE : UInt<1>, SIE : UInt<1>, UIE : UInt<1>} @[CSR.scala 116:37]
    _T_41.UIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.SIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.old_HIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.MIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.UPIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.SPIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.old_HPIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.MPIE <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.SPP <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.old_HPP <= UInt<2>("h00") @[CSR.scala 116:37]
    _T_41.MPP <= UInt<2>("h00") @[CSR.scala 116:37]
    _T_41.FS <= UInt<2>("h00") @[CSR.scala 116:37]
    _T_41.XS <= UInt<2>("h00") @[CSR.scala 116:37]
    _T_41.MPriv <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.SUM <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.MXR <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.TVM <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.TW <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.TSR <= UInt<1>("h00") @[CSR.scala 116:37]
    _T_41.zero1 <= UInt<8>("h00") @[CSR.scala 116:37]
    _T_41.SD <= UInt<1>("h00") @[CSR.scala 116:37]
    reg mstatus : {SD : UInt<1>, zero1 : UInt<8>, TSR : UInt<1>, TW : UInt<1>, TVM : UInt<1>, MXR : UInt<1>, SUM : UInt<1>, MPriv : UInt<1>, XS : UInt<2>, FS : UInt<2>, MPP : UInt<2>, old_HPP : UInt<2>, SPP : UInt<1>, MPIE : UInt<1>, old_HPIE : UInt<1>, SPIE : UInt<1>, UPIE : UInt<1>, MIE : UInt<1>, old_HIE : UInt<1>, SIE : UInt<1>, UIE : UInt<1>}, clock with : (reset => (reset, _T_41)) @[CSR.scala 116:24]
    reg mtime : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[CSR.scala 117:22]
    node _T_42 = add(mtime, UInt<1>("h01")) @[CSR.scala 118:18]
    node _T_43 = tail(_T_42, 1) @[CSR.scala 118:18]
    mtime <= _T_43 @[CSR.scala 118:9]
    node _T_44 = bits(io.id.addr, 9, 0) @[CSR.scala 125:43]
    infer mport _T_45 = csr[_T_44], clock @[CSR.scala 125:43]
    node _T_46 = cat(mstatus.SIE, mstatus.UIE) @[CSR.scala 131:29]
    node _T_47 = cat(mstatus.UPIE, mstatus.MIE) @[CSR.scala 131:29]
    node _T_48 = cat(_T_47, mstatus.old_HIE) @[CSR.scala 131:29]
    node _T_49 = cat(_T_48, _T_46) @[CSR.scala 131:29]
    node _T_50 = cat(mstatus.old_HPIE, mstatus.SPIE) @[CSR.scala 131:29]
    node _T_51 = cat(mstatus.old_HPP, mstatus.SPP) @[CSR.scala 131:29]
    node _T_52 = cat(_T_51, mstatus.MPIE) @[CSR.scala 131:29]
    node _T_53 = cat(_T_52, _T_50) @[CSR.scala 131:29]
    node _T_54 = cat(_T_53, _T_49) @[CSR.scala 131:29]
    node _T_55 = cat(mstatus.FS, mstatus.MPP) @[CSR.scala 131:29]
    node _T_56 = cat(mstatus.SUM, mstatus.MPriv) @[CSR.scala 131:29]
    node _T_57 = cat(_T_56, mstatus.XS) @[CSR.scala 131:29]
    node _T_58 = cat(_T_57, _T_55) @[CSR.scala 131:29]
    node _T_59 = cat(mstatus.TW, mstatus.TVM) @[CSR.scala 131:29]
    node _T_60 = cat(_T_59, mstatus.MXR) @[CSR.scala 131:29]
    node _T_61 = cat(mstatus.SD, mstatus.zero1) @[CSR.scala 131:29]
    node _T_62 = cat(_T_61, mstatus.TSR) @[CSR.scala 131:29]
    node _T_63 = cat(_T_62, _T_60) @[CSR.scala 131:29]
    node _T_64 = cat(_T_63, _T_58) @[CSR.scala 131:29]
    node _T_65 = cat(_T_64, _T_54) @[CSR.scala 131:29]
    node _T_66 = cat(mstatus.SIE, mstatus.UIE) @[CSR.scala 132:29]
    node _T_67 = cat(mstatus.UPIE, mstatus.MIE) @[CSR.scala 132:29]
    node _T_68 = cat(_T_67, mstatus.old_HIE) @[CSR.scala 132:29]
    node _T_69 = cat(_T_68, _T_66) @[CSR.scala 132:29]
    node _T_70 = cat(mstatus.old_HPIE, mstatus.SPIE) @[CSR.scala 132:29]
    node _T_71 = cat(mstatus.old_HPP, mstatus.SPP) @[CSR.scala 132:29]
    node _T_72 = cat(_T_71, mstatus.MPIE) @[CSR.scala 132:29]
    node _T_73 = cat(_T_72, _T_70) @[CSR.scala 132:29]
    node _T_74 = cat(_T_73, _T_69) @[CSR.scala 132:29]
    node _T_75 = cat(mstatus.FS, mstatus.MPP) @[CSR.scala 132:29]
    node _T_76 = cat(mstatus.SUM, mstatus.MPriv) @[CSR.scala 132:29]
    node _T_77 = cat(_T_76, mstatus.XS) @[CSR.scala 132:29]
    node _T_78 = cat(_T_77, _T_75) @[CSR.scala 132:29]
    node _T_79 = cat(mstatus.TW, mstatus.TVM) @[CSR.scala 132:29]
    node _T_80 = cat(_T_79, mstatus.MXR) @[CSR.scala 132:29]
    node _T_81 = cat(mstatus.SD, mstatus.zero1) @[CSR.scala 132:29]
    node _T_82 = cat(_T_81, mstatus.TSR) @[CSR.scala 132:29]
    node _T_83 = cat(_T_82, _T_80) @[CSR.scala 132:29]
    node _T_84 = cat(_T_83, _T_78) @[CSR.scala 132:29]
    node _T_85 = cat(_T_84, _T_74) @[CSR.scala 132:29]
    infer mport _T_86 = csr[UInt<10>("h0304")], clock @[CSR.scala 133:20]
    infer mport _T_87 = csr[UInt<10>("h0344")], clock @[CSR.scala 134:20]
    node _T_88 = bits(mtime, 31, 0) @[CSR.scala 135:23]
    node _T_89 = bits(mtime, 63, 32) @[CSR.scala 136:24]
    node _T_90 = bits(mtime, 31, 0) @[CSR.scala 137:24]
    node _T_91 = bits(mtime, 63, 32) @[CSR.scala 138:25]
    node _T_92 = eq(UInt<12>("h0f11"), io.id.addr) @[Mux.scala 80:60]
    node _T_93 = mux(_T_92, UInt<32>("h091d"), _T_45) @[Mux.scala 80:57]
    node _T_94 = eq(UInt<12>("h0f12"), io.id.addr) @[Mux.scala 80:60]
    node _T_95 = mux(_T_94, UInt<32>("h08fffffff"), _T_93) @[Mux.scala 80:57]
    node _T_96 = eq(UInt<12>("h0f13"), io.id.addr) @[Mux.scala 80:60]
    node _T_97 = mux(_T_96, UInt<32>("h091d"), _T_95) @[Mux.scala 80:57]
    node _T_98 = eq(UInt<12>("h0f14"), io.id.addr) @[Mux.scala 80:60]
    node _T_99 = mux(_T_98, UInt<32>("h00"), _T_97) @[Mux.scala 80:57]
    node _T_100 = eq(UInt<10>("h0301"), io.id.addr) @[Mux.scala 80:60]
    node _T_101 = mux(_T_100, UInt<32>("h040141100"), _T_99) @[Mux.scala 80:57]
    node _T_102 = eq(UInt<10>("h0300"), io.id.addr) @[Mux.scala 80:60]
    node _T_103 = mux(_T_102, _T_65, _T_101) @[Mux.scala 80:57]
    node _T_104 = eq(UInt<9>("h0100"), io.id.addr) @[Mux.scala 80:60]
    node _T_105 = mux(_T_104, _T_85, _T_103) @[Mux.scala 80:57]
    node _T_106 = eq(UInt<9>("h0104"), io.id.addr) @[Mux.scala 80:60]
    node _T_107 = mux(_T_106, _T_86, _T_105) @[Mux.scala 80:57]
    node _T_108 = eq(UInt<9>("h0144"), io.id.addr) @[Mux.scala 80:60]
    node _T_109 = mux(_T_108, _T_87, _T_107) @[Mux.scala 80:57]
    node _T_110 = eq(UInt<12>("h0c01"), io.id.addr) @[Mux.scala 80:60]
    node _T_111 = mux(_T_110, _T_88, _T_109) @[Mux.scala 80:57]
    node _T_112 = eq(UInt<12>("h0c81"), io.id.addr) @[Mux.scala 80:60]
    node _T_113 = mux(_T_112, _T_89, _T_111) @[Mux.scala 80:57]
    node _T_114 = eq(UInt<12>("h0c00"), io.id.addr) @[Mux.scala 80:60]
    node _T_115 = mux(_T_114, _T_90, _T_113) @[Mux.scala 80:57]
    node _T_116 = eq(UInt<12>("h0c80"), io.id.addr) @[Mux.scala 80:60]
    node _T_117 = mux(_T_116, _T_91, _T_115) @[Mux.scala 80:57]
    io.id.rdata <= _T_117 @[CSR.scala 125:15]
    io.id.prv <= prv @[CSR.scala 140:13]
    when io.mem.wrCSROp.valid : @[CSR.scala 143:30]
      node _T_118 = eq(UInt<12>("h0f11"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_118 : @[CSR.scala 145:39]
        infer mport _T_119 = csr[UInt<10>("h0311")], clock @[CSR.scala 146:12]
        _T_119 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_120 = eq(UInt<12>("h0f12"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_120 : @[CSR.scala 145:39]
        infer mport _T_121 = csr[UInt<10>("h0312")], clock @[CSR.scala 146:12]
        _T_121 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_122 = eq(UInt<12>("h0f13"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_122 : @[CSR.scala 145:39]
        infer mport _T_123 = csr[UInt<10>("h0313")], clock @[CSR.scala 146:12]
        _T_123 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_124 = eq(UInt<12>("h0f14"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_124 : @[CSR.scala 145:39]
        infer mport _T_125 = csr[UInt<10>("h0314")], clock @[CSR.scala 146:12]
        _T_125 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_126 = eq(UInt<10>("h0300"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_126 : @[CSR.scala 145:39]
        infer mport _T_127 = csr[UInt<10>("h0300")], clock @[CSR.scala 146:12]
        _T_127 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_128 = eq(UInt<10>("h0301"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_128 : @[CSR.scala 145:39]
        infer mport _T_129 = csr[UInt<10>("h0301")], clock @[CSR.scala 146:12]
        _T_129 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_130 = eq(UInt<10>("h0302"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_130 : @[CSR.scala 145:39]
        infer mport _T_131 = csr[UInt<10>("h0302")], clock @[CSR.scala 146:12]
        _T_131 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_132 = eq(UInt<10>("h0303"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_132 : @[CSR.scala 145:39]
        infer mport _T_133 = csr[UInt<10>("h0303")], clock @[CSR.scala 146:12]
        _T_133 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_134 = eq(UInt<10>("h0304"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_134 : @[CSR.scala 145:39]
        infer mport _T_135 = csr[UInt<10>("h0304")], clock @[CSR.scala 146:12]
        _T_135 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_136 = eq(UInt<10>("h0305"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_136 : @[CSR.scala 145:39]
        infer mport _T_137 = csr[UInt<10>("h0305")], clock @[CSR.scala 146:12]
        _T_137 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_138 = eq(UInt<10>("h0306"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_138 : @[CSR.scala 145:39]
        infer mport _T_139 = csr[UInt<10>("h0306")], clock @[CSR.scala 146:12]
        _T_139 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_140 = eq(UInt<10>("h0340"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_140 : @[CSR.scala 145:39]
        infer mport _T_141 = csr[UInt<10>("h0340")], clock @[CSR.scala 146:12]
        _T_141 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_142 = eq(UInt<10>("h0341"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_142 : @[CSR.scala 145:39]
        infer mport _T_143 = csr[UInt<10>("h0341")], clock @[CSR.scala 146:12]
        _T_143 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_144 = eq(UInt<10>("h0342"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_144 : @[CSR.scala 145:39]
        infer mport _T_145 = csr[UInt<10>("h0342")], clock @[CSR.scala 146:12]
        _T_145 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_146 = eq(UInt<10>("h0343"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_146 : @[CSR.scala 145:39]
        infer mport _T_147 = csr[UInt<10>("h0343")], clock @[CSR.scala 146:12]
        _T_147 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_148 = eq(UInt<10>("h0344"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_148 : @[CSR.scala 145:39]
        infer mport _T_149 = csr[UInt<10>("h0344")], clock @[CSR.scala 146:12]
        _T_149 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_150 = eq(UInt<9>("h0100"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_150 : @[CSR.scala 145:39]
        infer mport _T_151 = csr[UInt<9>("h0100")], clock @[CSR.scala 146:12]
        _T_151 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_152 = eq(UInt<9>("h0102"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_152 : @[CSR.scala 145:39]
        infer mport _T_153 = csr[UInt<9>("h0102")], clock @[CSR.scala 146:12]
        _T_153 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_154 = eq(UInt<9>("h0103"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_154 : @[CSR.scala 145:39]
        infer mport _T_155 = csr[UInt<9>("h0103")], clock @[CSR.scala 146:12]
        _T_155 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_156 = eq(UInt<9>("h0104"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_156 : @[CSR.scala 145:39]
        infer mport _T_157 = csr[UInt<9>("h0104")], clock @[CSR.scala 146:12]
        _T_157 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_158 = eq(UInt<9>("h0105"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_158 : @[CSR.scala 145:39]
        infer mport _T_159 = csr[UInt<9>("h0105")], clock @[CSR.scala 146:12]
        _T_159 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_160 = eq(UInt<9>("h0106"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_160 : @[CSR.scala 145:39]
        infer mport _T_161 = csr[UInt<9>("h0106")], clock @[CSR.scala 146:12]
        _T_161 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_162 = eq(UInt<9>("h0140"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_162 : @[CSR.scala 145:39]
        infer mport _T_163 = csr[UInt<9>("h0140")], clock @[CSR.scala 146:12]
        _T_163 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_164 = eq(UInt<9>("h0141"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_164 : @[CSR.scala 145:39]
        infer mport _T_165 = csr[UInt<9>("h0141")], clock @[CSR.scala 146:12]
        _T_165 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_166 = eq(UInt<9>("h0142"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_166 : @[CSR.scala 145:39]
        infer mport _T_167 = csr[UInt<9>("h0142")], clock @[CSR.scala 146:12]
        _T_167 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_168 = eq(UInt<9>("h0143"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_168 : @[CSR.scala 145:39]
        infer mport _T_169 = csr[UInt<9>("h0143")], clock @[CSR.scala 146:12]
        _T_169 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_170 = eq(UInt<9>("h0144"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_170 : @[CSR.scala 145:39]
        infer mport _T_171 = csr[UInt<9>("h0144")], clock @[CSR.scala 146:12]
        _T_171 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_172 = eq(UInt<9>("h0180"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_172 : @[CSR.scala 145:39]
        infer mport _T_173 = csr[UInt<9>("h0180")], clock @[CSR.scala 146:12]
        _T_173 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_174 = eq(UInt<3>("h05"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_174 : @[CSR.scala 145:39]
        infer mport _T_175 = csr[UInt<3>("h05")], clock @[CSR.scala 146:12]
        _T_175 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_176 = eq(UInt<7>("h040"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_176 : @[CSR.scala 145:39]
        infer mport _T_177 = csr[UInt<7>("h040")], clock @[CSR.scala 146:12]
        _T_177 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_178 = eq(UInt<7>("h041"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_178 : @[CSR.scala 145:39]
        infer mport _T_179 = csr[UInt<7>("h041")], clock @[CSR.scala 146:12]
        _T_179 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_180 = eq(UInt<7>("h042"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_180 : @[CSR.scala 145:39]
        infer mport _T_181 = csr[UInt<7>("h042")], clock @[CSR.scala 146:12]
        _T_181 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_182 = eq(UInt<7>("h043"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_182 : @[CSR.scala 145:39]
        infer mport _T_183 = csr[UInt<7>("h043")], clock @[CSR.scala 146:12]
        _T_183 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_184 = eq(UInt<7>("h044"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_184 : @[CSR.scala 145:39]
        infer mport _T_185 = csr[UInt<7>("h044")], clock @[CSR.scala 146:12]
        _T_185 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_186 = eq(UInt<10>("h0321"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_186 : @[CSR.scala 145:39]
        infer mport _T_187 = csr[UInt<10>("h0321")], clock @[CSR.scala 146:12]
        _T_187 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_188 = eq(UInt<10>("h0322"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_188 : @[CSR.scala 145:39]
        infer mport _T_189 = csr[UInt<10>("h0322")], clock @[CSR.scala 146:12]
        _T_189 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_190 = eq(UInt<12>("h0c01"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_190 : @[CSR.scala 145:39]
        infer mport _T_191 = csr[UInt<10>("h01")], clock @[CSR.scala 146:12]
        _T_191 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_192 = eq(UInt<12>("h0c81"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_192 : @[CSR.scala 145:39]
        infer mport _T_193 = csr[UInt<10>("h081")], clock @[CSR.scala 146:12]
        _T_193 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_194 = eq(UInt<12>("h0c00"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_194 : @[CSR.scala 145:39]
        infer mport _T_195 = csr[UInt<10>("h00")], clock @[CSR.scala 146:12]
        _T_195 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_196 = eq(UInt<12>("h0c80"), io.mem.wrCSROp.addr) @[CSR.scala 145:14]
      when _T_196 : @[CSR.scala 145:39]
        infer mport _T_197 = csr[UInt<10>("h080")], clock @[CSR.scala 146:12]
        _T_197 <= io.mem.wrCSROp.data @[CSR.scala 146:16]
        skip @[CSR.scala 145:39]
      node _T_198 = eq(io.mem.wrCSROp.addr, UInt<10>("h0300")) @[CSR.scala 149:30]
      when _T_198 : @[CSR.scala 149:48]
        wire _T_199 : {SD : UInt<1>, zero1 : UInt<8>, TSR : UInt<1>, TW : UInt<1>, TVM : UInt<1>, MXR : UInt<1>, SUM : UInt<1>, MPriv : UInt<1>, XS : UInt<2>, FS : UInt<2>, MPP : UInt<2>, old_HPP : UInt<2>, SPP : UInt<1>, MPIE : UInt<1>, old_HPIE : UInt<1>, SPIE : UInt<1>, UPIE : UInt<1>, MIE : UInt<1>, old_HIE : UInt<1>, SIE : UInt<1>, UIE : UInt<1>} @[CSR.scala 150:46]
        wire _T_200 : UInt<32>
        _T_200 <= io.mem.wrCSROp.data
        node _T_201 = bits(_T_200, 0, 0) @[CSR.scala 150:46]
        _T_199.UIE <= _T_201 @[CSR.scala 150:46]
        node _T_202 = bits(_T_200, 1, 1) @[CSR.scala 150:46]
        _T_199.SIE <= _T_202 @[CSR.scala 150:46]
        node _T_203 = bits(_T_200, 2, 2) @[CSR.scala 150:46]
        _T_199.old_HIE <= _T_203 @[CSR.scala 150:46]
        node _T_204 = bits(_T_200, 3, 3) @[CSR.scala 150:46]
        _T_199.MIE <= _T_204 @[CSR.scala 150:46]
        node _T_205 = bits(_T_200, 4, 4) @[CSR.scala 150:46]
        _T_199.UPIE <= _T_205 @[CSR.scala 150:46]
        node _T_206 = bits(_T_200, 5, 5) @[CSR.scala 150:46]
        _T_199.SPIE <= _T_206 @[CSR.scala 150:46]
        node _T_207 = bits(_T_200, 6, 6) @[CSR.scala 150:46]
        _T_199.old_HPIE <= _T_207 @[CSR.scala 150:46]
        node _T_208 = bits(_T_200, 7, 7) @[CSR.scala 150:46]
        _T_199.MPIE <= _T_208 @[CSR.scala 150:46]
        node _T_209 = bits(_T_200, 8, 8) @[CSR.scala 150:46]
        _T_199.SPP <= _T_209 @[CSR.scala 150:46]
        node _T_210 = bits(_T_200, 10, 9) @[CSR.scala 150:46]
        _T_199.old_HPP <= _T_210 @[CSR.scala 150:46]
        node _T_211 = bits(_T_200, 12, 11) @[CSR.scala 150:46]
        _T_199.MPP <= _T_211 @[CSR.scala 150:46]
        node _T_212 = bits(_T_200, 14, 13) @[CSR.scala 150:46]
        _T_199.FS <= _T_212 @[CSR.scala 150:46]
        node _T_213 = bits(_T_200, 16, 15) @[CSR.scala 150:46]
        _T_199.XS <= _T_213 @[CSR.scala 150:46]
        node _T_214 = bits(_T_200, 17, 17) @[CSR.scala 150:46]
        _T_199.MPriv <= _T_214 @[CSR.scala 150:46]
        node _T_215 = bits(_T_200, 18, 18) @[CSR.scala 150:46]
        _T_199.SUM <= _T_215 @[CSR.scala 150:46]
        node _T_216 = bits(_T_200, 19, 19) @[CSR.scala 150:46]
        _T_199.MXR <= _T_216 @[CSR.scala 150:46]
        node _T_217 = bits(_T_200, 20, 20) @[CSR.scala 150:46]
        _T_199.TVM <= _T_217 @[CSR.scala 150:46]
        node _T_218 = bits(_T_200, 21, 21) @[CSR.scala 150:46]
        _T_199.TW <= _T_218 @[CSR.scala 150:46]
        node _T_219 = bits(_T_200, 22, 22) @[CSR.scala 150:46]
        _T_199.TSR <= _T_219 @[CSR.scala 150:46]
        node _T_220 = bits(_T_200, 30, 23) @[CSR.scala 150:46]
        _T_199.zero1 <= _T_220 @[CSR.scala 150:46]
        node _T_221 = bits(_T_200, 31, 31) @[CSR.scala 150:46]
        _T_199.SD <= _T_221 @[CSR.scala 150:46]
        mstatus.UIE <= _T_199.UIE @[CSR.scala 150:15]
        mstatus.SIE <= _T_199.SIE @[CSR.scala 150:15]
        mstatus.old_HIE <= _T_199.old_HIE @[CSR.scala 150:15]
        mstatus.MIE <= _T_199.MIE @[CSR.scala 150:15]
        mstatus.UPIE <= _T_199.UPIE @[CSR.scala 150:15]
        mstatus.SPIE <= _T_199.SPIE @[CSR.scala 150:15]
        mstatus.old_HPIE <= _T_199.old_HPIE @[CSR.scala 150:15]
        mstatus.MPIE <= _T_199.MPIE @[CSR.scala 150:15]
        mstatus.SPP <= _T_199.SPP @[CSR.scala 150:15]
        mstatus.old_HPP <= _T_199.old_HPP @[CSR.scala 150:15]
        mstatus.MPP <= _T_199.MPP @[CSR.scala 150:15]
        mstatus.FS <= _T_199.FS @[CSR.scala 150:15]
        mstatus.XS <= _T_199.XS @[CSR.scala 150:15]
        mstatus.MPriv <= _T_199.MPriv @[CSR.scala 150:15]
        mstatus.SUM <= _T_199.SUM @[CSR.scala 150:15]
        mstatus.MXR <= _T_199.MXR @[CSR.scala 150:15]
        mstatus.TVM <= _T_199.TVM @[CSR.scala 150:15]
        mstatus.TW <= _T_199.TW @[CSR.scala 150:15]
        mstatus.TSR <= _T_199.TSR @[CSR.scala 150:15]
        mstatus.zero1 <= _T_199.zero1 @[CSR.scala 150:15]
        mstatus.SD <= _T_199.SD @[CSR.scala 150:15]
        skip @[CSR.scala 149:48]
      node _T_222 = eq(io.mem.wrCSROp.addr, UInt<9>("h0100")) @[CSR.scala 152:30]
      when _T_222 : @[CSR.scala 152:48]
        wire _T_223 : {SD : UInt<1>, zero1 : UInt<8>, TSR : UInt<1>, TW : UInt<1>, TVM : UInt<1>, MXR : UInt<1>, SUM : UInt<1>, MPriv : UInt<1>, XS : UInt<2>, FS : UInt<2>, MPP : UInt<2>, old_HPP : UInt<2>, SPP : UInt<1>, MPIE : UInt<1>, old_HPIE : UInt<1>, SPIE : UInt<1>, UPIE : UInt<1>, MIE : UInt<1>, old_HIE : UInt<1>, SIE : UInt<1>, UIE : UInt<1>} @[CSR.scala 153:46]
        wire _T_224 : UInt<32>
        _T_224 <= io.mem.wrCSROp.data
        node _T_225 = bits(_T_224, 0, 0) @[CSR.scala 153:46]
        _T_223.UIE <= _T_225 @[CSR.scala 153:46]
        node _T_226 = bits(_T_224, 1, 1) @[CSR.scala 153:46]
        _T_223.SIE <= _T_226 @[CSR.scala 153:46]
        node _T_227 = bits(_T_224, 2, 2) @[CSR.scala 153:46]
        _T_223.old_HIE <= _T_227 @[CSR.scala 153:46]
        node _T_228 = bits(_T_224, 3, 3) @[CSR.scala 153:46]
        _T_223.MIE <= _T_228 @[CSR.scala 153:46]
        node _T_229 = bits(_T_224, 4, 4) @[CSR.scala 153:46]
        _T_223.UPIE <= _T_229 @[CSR.scala 153:46]
        node _T_230 = bits(_T_224, 5, 5) @[CSR.scala 153:46]
        _T_223.SPIE <= _T_230 @[CSR.scala 153:46]
        node _T_231 = bits(_T_224, 6, 6) @[CSR.scala 153:46]
        _T_223.old_HPIE <= _T_231 @[CSR.scala 153:46]
        node _T_232 = bits(_T_224, 7, 7) @[CSR.scala 153:46]
        _T_223.MPIE <= _T_232 @[CSR.scala 153:46]
        node _T_233 = bits(_T_224, 8, 8) @[CSR.scala 153:46]
        _T_223.SPP <= _T_233 @[CSR.scala 153:46]
        node _T_234 = bits(_T_224, 10, 9) @[CSR.scala 153:46]
        _T_223.old_HPP <= _T_234 @[CSR.scala 153:46]
        node _T_235 = bits(_T_224, 12, 11) @[CSR.scala 153:46]
        _T_223.MPP <= _T_235 @[CSR.scala 153:46]
        node _T_236 = bits(_T_224, 14, 13) @[CSR.scala 153:46]
        _T_223.FS <= _T_236 @[CSR.scala 153:46]
        node _T_237 = bits(_T_224, 16, 15) @[CSR.scala 153:46]
        _T_223.XS <= _T_237 @[CSR.scala 153:46]
        node _T_238 = bits(_T_224, 17, 17) @[CSR.scala 153:46]
        _T_223.MPriv <= _T_238 @[CSR.scala 153:46]
        node _T_239 = bits(_T_224, 18, 18) @[CSR.scala 153:46]
        _T_223.SUM <= _T_239 @[CSR.scala 153:46]
        node _T_240 = bits(_T_224, 19, 19) @[CSR.scala 153:46]
        _T_223.MXR <= _T_240 @[CSR.scala 153:46]
        node _T_241 = bits(_T_224, 20, 20) @[CSR.scala 153:46]
        _T_223.TVM <= _T_241 @[CSR.scala 153:46]
        node _T_242 = bits(_T_224, 21, 21) @[CSR.scala 153:46]
        _T_223.TW <= _T_242 @[CSR.scala 153:46]
        node _T_243 = bits(_T_224, 22, 22) @[CSR.scala 153:46]
        _T_223.TSR <= _T_243 @[CSR.scala 153:46]
        node _T_244 = bits(_T_224, 30, 23) @[CSR.scala 153:46]
        _T_223.zero1 <= _T_244 @[CSR.scala 153:46]
        node _T_245 = bits(_T_224, 31, 31) @[CSR.scala 153:46]
        _T_223.SD <= _T_245 @[CSR.scala 153:46]
        mstatus.UIE <= _T_223.UIE @[CSR.scala 153:15]
        mstatus.SIE <= _T_223.SIE @[CSR.scala 153:15]
        mstatus.old_HIE <= _T_223.old_HIE @[CSR.scala 153:15]
        mstatus.MIE <= _T_223.MIE @[CSR.scala 153:15]
        mstatus.UPIE <= _T_223.UPIE @[CSR.scala 153:15]
        mstatus.SPIE <= _T_223.SPIE @[CSR.scala 153:15]
        mstatus.old_HPIE <= _T_223.old_HPIE @[CSR.scala 153:15]
        mstatus.MPIE <= _T_223.MPIE @[CSR.scala 153:15]
        mstatus.SPP <= _T_223.SPP @[CSR.scala 153:15]
        mstatus.old_HPP <= _T_223.old_HPP @[CSR.scala 153:15]
        mstatus.MPP <= _T_223.MPP @[CSR.scala 153:15]
        mstatus.FS <= _T_223.FS @[CSR.scala 153:15]
        mstatus.XS <= _T_223.XS @[CSR.scala 153:15]
        mstatus.MPriv <= _T_223.MPriv @[CSR.scala 153:15]
        mstatus.SUM <= _T_223.SUM @[CSR.scala 153:15]
        mstatus.MXR <= _T_223.MXR @[CSR.scala 153:15]
        mstatus.TVM <= _T_223.TVM @[CSR.scala 153:15]
        mstatus.TW <= _T_223.TW @[CSR.scala 153:15]
        mstatus.TSR <= _T_223.TSR @[CSR.scala 153:15]
        mstatus.zero1 <= _T_223.zero1 @[CSR.scala 153:15]
        mstatus.SD <= _T_223.SD @[CSR.scala 153:15]
        skip @[CSR.scala 152:48]
      node _T_246 = eq(io.mem.wrCSROp.addr, UInt<9>("h0104")) @[CSR.scala 155:30]
      when _T_246 : @[CSR.scala 155:44]
        infer mport _T_247 = csr[UInt<10>("h0304")], clock @[CSR.scala 156:10]
        _T_247 <= io.mem.wrCSROp.data @[CSR.scala 156:21]
        skip @[CSR.scala 155:44]
      node _T_248 = eq(io.mem.wrCSROp.addr, UInt<9>("h0144")) @[CSR.scala 158:30]
      when _T_248 : @[CSR.scala 158:44]
        infer mport _T_249 = csr[UInt<10>("h0344")], clock @[CSR.scala 159:10]
        _T_249 <= io.mem.wrCSROp.data @[CSR.scala 159:21]
        skip @[CSR.scala 158:44]
      skip @[CSR.scala 143:30]
    infer mport mepc = csr[UInt<10>("h0341")], clock @[CSR.scala 164:17]
    infer mport sepc = csr[UInt<9>("h0141")], clock @[CSR.scala 165:17]
    infer mport uepc = csr[UInt<7>("h041")], clock @[CSR.scala 166:17]
    infer mport mcause = csr[UInt<10>("h0342")], clock @[CSR.scala 167:19]
    infer mport scause = csr[UInt<9>("h0142")], clock @[CSR.scala 168:19]
    infer mport ucause = csr[UInt<7>("h042")], clock @[CSR.scala 169:19]
    infer mport mtvec = csr[UInt<10>("h0305")], clock @[CSR.scala 170:18]
    infer mport stvec = csr[UInt<9>("h0105")], clock @[CSR.scala 171:18]
    infer mport utvec = csr[UInt<3>("h05")], clock @[CSR.scala 172:18]
    infer mport mtval = csr[UInt<10>("h0343")], clock @[CSR.scala 173:18]
    infer mport stval = csr[UInt<9>("h0143")], clock @[CSR.scala 174:18]
    infer mport utval = csr[UInt<7>("h043")], clock @[CSR.scala 175:18]
    infer mport medeleg = csr[UInt<10>("h0302")], clock @[CSR.scala 176:20]
    infer mport mideleg = csr[UInt<10>("h0303")], clock @[CSR.scala 177:20]
    infer mport sedeleg = csr[UInt<9>("h0102")], clock @[CSR.scala 178:20]
    infer mport sideleg = csr[UInt<9>("h0103")], clock @[CSR.scala 179:20]
    infer mport mie = csr[UInt<10>("h0304")], clock @[CSR.scala 180:18]
    infer mport mip = csr[UInt<10>("h0344")], clock @[CSR.scala 181:18]
    infer mport _T_250 = csr[UInt<10>("h0322")], clock @[CSR.scala 182:25]
    infer mport _T_251 = csr[UInt<10>("h0321")], clock @[CSR.scala 182:46]
    node mtimecmp = cat(_T_250, _T_251) @[Cat.scala 29:58]
    node _T_252 = eq(UInt<2>("h03"), prv) @[Mux.scala 80:60]
    node _T_253 = mux(_T_252, mstatus.MIE, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_254 = eq(UInt<2>("h01"), prv) @[Mux.scala 80:60]
    node _T_255 = mux(_T_254, mstatus.SIE, _T_253) @[Mux.scala 80:57]
    node _T_256 = eq(UInt<2>("h00"), prv) @[Mux.scala 80:60]
    node ie = mux(_T_256, mstatus.UIE, _T_255) @[Mux.scala 80:57]
    node time_inter = geq(mtime, mtimecmp) @[CSR.scala 194:27]
    infer mport _T_257 = csr[UInt<10>("h0344")], clock @[CSR.scala 204:6]
    node _T_258 = eq(prv, UInt<2>("h03")) @[CSR.scala 206:10]
    node _T_259 = and(_T_258, io.external_inter.valid) @[CSR.scala 206:22]
    node _T_260 = eq(prv, UInt<2>("h01")) @[CSR.scala 208:10]
    node _T_261 = and(_T_260, io.external_inter.valid) @[CSR.scala 208:22]
    node _T_262 = eq(prv, UInt<2>("h00")) @[CSR.scala 209:10]
    node _T_263 = and(_T_262, io.external_inter.valid) @[CSR.scala 209:22]
    node _T_264 = eq(prv, UInt<2>("h03")) @[CSR.scala 211:10]
    node _T_265 = and(_T_264, time_inter) @[CSR.scala 211:22]
    node _T_266 = eq(prv, UInt<2>("h01")) @[CSR.scala 213:10]
    node _T_267 = and(_T_266, time_inter) @[CSR.scala 213:22]
    node _T_268 = eq(prv, UInt<2>("h00")) @[CSR.scala 214:10]
    node _T_269 = and(_T_268, time_inter) @[CSR.scala 214:22]
    node _T_270 = bits(mip, 3, 0) @[CSR.scala 215:8]
    node _T_271 = cat(_T_269, _T_270) @[Cat.scala 29:58]
    node _T_272 = cat(_T_265, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_273 = cat(_T_272, _T_267) @[Cat.scala 29:58]
    node _T_274 = cat(_T_273, _T_271) @[Cat.scala 29:58]
    node _T_275 = cat(_T_261, _T_263) @[Cat.scala 29:58]
    node _T_276 = cat(UInt<20>("h00"), _T_259) @[Cat.scala 29:58]
    node _T_277 = cat(_T_276, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_278 = cat(_T_277, _T_275) @[Cat.scala 29:58]
    node _T_279 = cat(_T_278, _T_274) @[Cat.scala 29:58]
    _T_257 <= _T_279 @[CSR.scala 204:16]
    node ipie = and(mip, mie) @[CSR.scala 218:18]
    node _T_280 = not(mideleg) @[CSR.scala 219:23]
    node ipie_m = and(ipie, _T_280) @[CSR.scala 219:21]
    node ipie_s = and(ipie, mideleg) @[CSR.scala 220:21]
    node _T_281 = bits(ipie_m, 11, 11) @[CSR.scala 223:12]
    node _T_282 = bits(ipie_m, 9, 9) @[CSR.scala 224:12]
    node _T_283 = bits(ipie_m, 8, 8) @[CSR.scala 225:12]
    node _T_284 = bits(ipie_m, 7, 7) @[CSR.scala 227:12]
    node _T_285 = bits(ipie_m, 5, 5) @[CSR.scala 228:12]
    node _T_286 = bits(ipie_m, 4, 4) @[CSR.scala 229:12]
    node _T_287 = bits(ipie_m, 3, 3) @[CSR.scala 231:12]
    node _T_288 = bits(ipie_m, 1, 1) @[CSR.scala 232:12]
    node _T_289 = bits(ipie_m, 0, 0) @[CSR.scala 233:12]
    node _T_290 = bits(ipie_s, 11, 11) @[CSR.scala 235:12]
    node _T_291 = bits(ipie_s, 9, 9) @[CSR.scala 236:12]
    node _T_292 = bits(ipie_s, 8, 8) @[CSR.scala 237:12]
    node _T_293 = bits(ipie_s, 7, 7) @[CSR.scala 239:12]
    node _T_294 = bits(ipie_s, 5, 5) @[CSR.scala 240:12]
    node _T_295 = bits(ipie_s, 4, 4) @[CSR.scala 241:12]
    node _T_296 = bits(ipie_s, 3, 3) @[CSR.scala 243:12]
    node _T_297 = bits(ipie_s, 1, 1) @[CSR.scala 244:12]
    node _T_298 = bits(ipie_s, 0, 0) @[CSR.scala 245:12]
    node _T_299 = mux(_T_298, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 47:69]
    node _T_300 = mux(_T_297, UInt<1>("h01"), _T_299) @[Mux.scala 47:69]
    node _T_301 = mux(_T_296, UInt<2>("h03"), _T_300) @[Mux.scala 47:69]
    node _T_302 = mux(_T_295, UInt<3>("h04"), _T_301) @[Mux.scala 47:69]
    node _T_303 = mux(_T_294, UInt<3>("h05"), _T_302) @[Mux.scala 47:69]
    node _T_304 = mux(_T_293, UInt<3>("h07"), _T_303) @[Mux.scala 47:69]
    node _T_305 = mux(_T_292, UInt<4>("h08"), _T_304) @[Mux.scala 47:69]
    node _T_306 = mux(_T_291, UInt<4>("h09"), _T_305) @[Mux.scala 47:69]
    node _T_307 = mux(_T_290, UInt<4>("h0b"), _T_306) @[Mux.scala 47:69]
    node _T_308 = mux(_T_289, UInt<1>("h00"), _T_307) @[Mux.scala 47:69]
    node _T_309 = mux(_T_288, UInt<1>("h01"), _T_308) @[Mux.scala 47:69]
    node _T_310 = mux(_T_287, UInt<2>("h03"), _T_309) @[Mux.scala 47:69]
    node _T_311 = mux(_T_286, UInt<3>("h04"), _T_310) @[Mux.scala 47:69]
    node _T_312 = mux(_T_285, UInt<3>("h05"), _T_311) @[Mux.scala 47:69]
    node _T_313 = mux(_T_284, UInt<3>("h07"), _T_312) @[Mux.scala 47:69]
    node _T_314 = mux(_T_283, UInt<4>("h08"), _T_313) @[Mux.scala 47:69]
    node _T_315 = mux(_T_282, UInt<4>("h09"), _T_314) @[Mux.scala 47:69]
    node ic = mux(_T_281, UInt<4>("h0b"), _T_315) @[Mux.scala 47:69]
    node _T_316 = dshr(mideleg, ic) @[CSR.scala 250:36]
    node _T_317 = bits(_T_316, 0, 0) @[CSR.scala 250:36]
    node inter_new_mode = mux(_T_317, UInt<2>("h01"), UInt<2>("h03")) @[CSR.scala 250:27]
    node _T_318 = gt(inter_new_mode, prv) @[CSR.scala 251:38]
    node _T_319 = eq(inter_new_mode, prv) @[CSR.scala 251:65]
    node _T_320 = and(_T_319, ie) @[CSR.scala 251:74]
    node inter_enable = or(_T_318, _T_320) @[CSR.scala 251:45]
    node _T_321 = orr(ipie) @[CSR.scala 257:46]
    node _T_322 = and(inter_enable, _T_321) @[CSR.scala 257:38]
    io.mem.inter.valid <= _T_322 @[CSR.scala 257:22]
    node _T_323 = shl(UInt<1>("h01"), 31) @[CSR.scala 258:42]
    node _T_324 = or(_T_323, ic) @[CSR.scala 258:48]
    io.mem.inter.bits <= _T_324 @[CSR.scala 258:22]
    node have_excep = and(io.mem.excep.valid, io.mem.excep.valid_inst) @[CSR.scala 261:39]
    io.flush <= have_excep @[CSR.scala 264:12]
    io.csrNewPc <= UInt<1>("h00") @[CSR.scala 265:15]
    when have_excep : @[CSR.scala 268:20]
      node _T_325 = bits(io.mem.excep.code, 31, 2) @[Const.scala 133:33]
      node _T_326 = eq(_T_325, UInt<30>("h04")) @[Const.scala 133:40]
      when _T_326 : @[CSR.scala 270:30]
        node _T_327 = bits(io.mem.excep.code, 1, 0) @[Const.scala 134:32]
        node _T_328 = eq(UInt<2>("h03"), _T_327) @[Conditional.scala 37:30]
        when _T_328 : @[Conditional.scala 40:58]
          mstatus.MIE <= mstatus.MPIE @[CSR.scala 277:23]
          mstatus.MPIE <= UInt<1>("h01") @[CSR.scala 278:24]
          mstatus.MPP <= UInt<2>("h00") @[CSR.scala 279:23]
          nextPrv <= mstatus.MPP @[CSR.scala 280:19]
          io.csrNewPc <= mepc @[CSR.scala 281:23]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_329 = eq(UInt<2>("h01"), _T_327) @[Conditional.scala 37:30]
          when _T_329 : @[Conditional.scala 39:67]
            mstatus.SIE <= mstatus.SPIE @[CSR.scala 284:23]
            mstatus.SPIE <= UInt<1>("h01") @[CSR.scala 285:24]
            mstatus.SPP <= UInt<1>("h00") @[CSR.scala 286:23]
            nextPrv <= mstatus.SPP @[CSR.scala 287:19]
            io.csrNewPc <= sepc @[CSR.scala 288:23]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_330 = eq(UInt<2>("h00"), _T_327) @[Conditional.scala 37:30]
            when _T_330 : @[Conditional.scala 39:67]
              mstatus.UIE <= mstatus.MPIE @[CSR.scala 291:23]
              mstatus.UPIE <= UInt<1>("h01") @[CSR.scala 292:24]
              nextPrv <= UInt<2>("h00") @[CSR.scala 293:19]
              io.csrNewPc <= uepc @[CSR.scala 294:23]
              skip @[Conditional.scala 39:67]
        skip @[CSR.scala 270:30]
      else : @[CSR.scala 297:86]
        node _T_331 = eq(io.mem.excep.code, UInt<5>("h014")) @[CSR.scala 297:29]
        node _T_332 = eq(io.mem.excep.code, UInt<5>("h015")) @[CSR.scala 297:65]
        node _T_333 = or(_T_331, _T_332) @[CSR.scala 297:49]
        when _T_333 : @[CSR.scala 297:86]
          node _T_334 = add(io.mem.excep.pc, UInt<3>("h04")) @[CSR.scala 298:38]
          node _T_335 = tail(_T_334, 1) @[CSR.scala 298:38]
          io.csrNewPc <= _T_335 @[CSR.scala 298:19]
          skip @[CSR.scala 297:86]
        else : @[CSR.scala 299:17]
          node _T_336 = bits(io.mem.excep.code, 31, 31) @[CSR.scala 303:16]
          node _T_337 = eq(_T_336, UInt<1>("h00")) @[CSR.scala 303:10]
          node _T_338 = bits(io.mem.excep.code, 4, 0) @[CSR.scala 303:38]
          node _T_339 = dshr(medeleg, _T_338) @[CSR.scala 303:32]
          node _T_340 = bits(_T_339, 0, 0) @[CSR.scala 303:32]
          node _T_341 = eq(_T_340, UInt<1>("h00")) @[CSR.scala 303:24]
          node _T_342 = and(_T_337, _T_341) @[CSR.scala 303:21]
          node _T_343 = bits(io.mem.excep.code, 31, 31) @[CSR.scala 304:16]
          node _T_344 = bits(io.mem.excep.code, 4, 0) @[CSR.scala 304:38]
          node _T_345 = dshr(mideleg, _T_344) @[CSR.scala 304:32]
          node _T_346 = bits(_T_345, 0, 0) @[CSR.scala 304:32]
          node _T_347 = eq(_T_346, UInt<1>("h00")) @[CSR.scala 304:24]
          node _T_348 = and(_T_343, _T_347) @[CSR.scala 304:21]
          node _T_349 = bits(io.mem.excep.code, 31, 31) @[CSR.scala 305:16]
          node _T_350 = eq(_T_349, UInt<1>("h00")) @[CSR.scala 305:10]
          node _T_351 = bits(io.mem.excep.code, 4, 0) @[CSR.scala 305:38]
          node _T_352 = dshr(sedeleg, _T_351) @[CSR.scala 305:32]
          node _T_353 = bits(_T_352, 0, 0) @[CSR.scala 305:32]
          node _T_354 = eq(_T_353, UInt<1>("h00")) @[CSR.scala 305:24]
          node _T_355 = and(_T_350, _T_354) @[CSR.scala 305:21]
          node _T_356 = bits(io.mem.excep.code, 31, 31) @[CSR.scala 306:16]
          node _T_357 = bits(io.mem.excep.code, 4, 0) @[CSR.scala 306:38]
          node _T_358 = dshr(sideleg, _T_357) @[CSR.scala 306:32]
          node _T_359 = bits(_T_358, 0, 0) @[CSR.scala 306:32]
          node _T_360 = eq(_T_359, UInt<1>("h00")) @[CSR.scala 306:24]
          node _T_361 = and(_T_356, _T_360) @[CSR.scala 306:21]
          node _T_362 = mux(_T_361, UInt<2>("h01"), UInt<2>("h00")) @[Mux.scala 47:69]
          node _T_363 = mux(_T_355, UInt<2>("h01"), _T_362) @[Mux.scala 47:69]
          node _T_364 = mux(_T_348, UInt<2>("h03"), _T_363) @[Mux.scala 47:69]
          node _T_365 = mux(_T_342, UInt<2>("h03"), _T_364) @[Mux.scala 47:69]
          nextPrv <= _T_365 @[CSR.scala 302:15]
          node _T_366 = eq(UInt<2>("h03"), nextPrv) @[Conditional.scala 37:30]
          when _T_366 : @[Conditional.scala 40:58]
            mstatus.MPIE <= mstatus.MIE @[CSR.scala 311:24]
            mstatus.MIE <= UInt<1>("h00") @[CSR.scala 312:24]
            mstatus.MPP <= prv @[CSR.scala 313:23]
            mepc <= io.mem.excep.pc @[CSR.scala 314:16]
            mcause <= io.mem.excep.code @[CSR.scala 315:18]
            mtval <= io.mem.excep.value @[CSR.scala 316:17]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_367 = eq(UInt<2>("h01"), nextPrv) @[Conditional.scala 37:30]
            when _T_367 : @[Conditional.scala 39:67]
              mstatus.SPIE <= mstatus.SIE @[CSR.scala 319:24]
              mstatus.SIE <= UInt<1>("h00") @[CSR.scala 320:24]
              node _T_368 = eq(prv, UInt<2>("h01")) @[CSR.scala 321:31]
              mstatus.SPP <= _T_368 @[CSR.scala 321:23]
              sepc <= io.mem.excep.pc @[CSR.scala 322:16]
              scause <= io.mem.excep.code @[CSR.scala 323:18]
              stval <= io.mem.excep.value @[CSR.scala 324:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_369 = eq(UInt<2>("h00"), nextPrv) @[Conditional.scala 37:30]
              when _T_369 : @[Conditional.scala 39:67]
                mstatus.UPIE <= mstatus.UIE @[CSR.scala 327:24]
                mstatus.UIE <= UInt<1>("h00") @[CSR.scala 328:24]
                uepc <= io.mem.excep.pc @[CSR.scala 329:16]
                ucause <= io.mem.excep.code @[CSR.scala 330:18]
                utval <= io.mem.excep.value @[CSR.scala 331:17]
                skip @[Conditional.scala 39:67]
          node _T_370 = eq(UInt<2>("h03"), nextPrv) @[Mux.scala 80:60]
          node _T_371 = mux(_T_370, mtvec, UInt<1>("h00")) @[Mux.scala 80:57]
          node _T_372 = eq(UInt<2>("h01"), nextPrv) @[Mux.scala 80:60]
          node _T_373 = mux(_T_372, stvec, _T_371) @[Mux.scala 80:57]
          node _T_374 = eq(UInt<2>("h00"), nextPrv) @[Mux.scala 80:60]
          node _T_375 = mux(_T_374, utvec, _T_373) @[Mux.scala 80:57]
          node _T_376 = bits(_T_375, 31, 2) @[CSR.scala 340:27]
          node _T_377 = cat(_T_376, UInt<2>("h00")) @[Cat.scala 29:58]
          node _T_378 = bits(_T_375, 1, 0) @[CSR.scala 341:31]
          node _T_379 = eq(_T_378, UInt<1>("h00")) @[CSR.scala 341:37]
          node _T_380 = mul(UInt<3>("h04"), io.mem.excep.code) @[CSR.scala 343:20]
          node _T_381 = add(_T_377, _T_380) @[CSR.scala 343:14]
          node _T_382 = tail(_T_381, 1) @[CSR.scala 343:14]
          node _T_383 = mux(_T_379, _T_377, _T_382) @[CSR.scala 341:25]
          io.csrNewPc <= _T_383 @[CSR.scala 341:19]
          skip @[CSR.scala 299:17]
      skip @[CSR.scala 268:20]
    infer mport _T_384 = csr[UInt<9>("h0180")], clock @[CSR.scala 350:21]
    io.mmu.satp <= _T_384 @[CSR.scala 350:15]
    io.mmu.sum <= mstatus.SUM @[CSR.scala 351:14]
    io.mmu.mxr <= mstatus.MXR @[CSR.scala 352:14]
    node _T_385 = eq(io.mem.excep.code, UInt<5>("h014")) @[CSR.scala 353:63]
    node _T_386 = and(io.mem.excep.valid, _T_385) @[CSR.scala 353:42]
    io.mmu.flush.one <= _T_386 @[CSR.scala 353:20]
    node _T_387 = eq(io.mem.excep.code, UInt<5>("h015")) @[CSR.scala 354:63]
    node _T_388 = and(io.mem.excep.valid, _T_387) @[CSR.scala 354:42]
    io.mmu.flush.all <= _T_388 @[CSR.scala 354:20]
    io.mmu.flush.addr <= io.mem.excep.value @[CSR.scala 355:21]
    io.mmu.priv <= nextPrv @[CSR.scala 356:15]
    
  module Core : 
    input clock : Clock
    input reset : Reset
    output io : {dev : {if_ : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, mem : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}}, debug : {idex : {aluOp : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, store_data : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}}, ifpc : UInt<32>, reg : UInt<32>[32], finish_pc : {valid : UInt<1>, bits : UInt<32>}}}
    
    inst iff of IF @[Core.scala 20:19]
    iff.clock <= clock
    iff.reset <= reset
    inst id of ID @[Core.scala 21:19]
    id.clock <= clock
    id.reset <= reset
    inst ex of EX @[Core.scala 22:19]
    ex.clock <= clock
    ex.reset <= reset
    inst mem of MEM @[Core.scala 23:19]
    mem.clock <= clock
    mem.reset <= reset
    inst reg of RegFile @[Core.scala 24:19]
    reg.clock <= clock
    reg.reset <= reset
    inst mmu of MMU @[Core.scala 25:19]
    mmu.clock <= clock
    mmu.reset <= reset
    inst csr of CSR @[Core.scala 26:19]
    csr.clock <= clock
    csr.reset <= reset
    iff.io.id.ready <= id.io.iff.ready @[Core.scala 29:20]
    iff.io.id.branch.bits <= id.io.iff.branch.bits @[Core.scala 29:20]
    iff.io.id.branch.valid <= id.io.iff.branch.valid @[Core.scala 29:20]
    id.io.iff.excep.valid_inst <= iff.io.id.excep.valid_inst @[Core.scala 29:20]
    id.io.iff.excep.pc <= iff.io.id.excep.pc @[Core.scala 29:20]
    id.io.iff.excep.value <= iff.io.id.excep.value @[Core.scala 29:20]
    id.io.iff.excep.code <= iff.io.id.excep.code @[Core.scala 29:20]
    id.io.iff.excep.valid <= iff.io.id.excep.valid @[Core.scala 29:20]
    id.io.iff.inst <= iff.io.id.inst @[Core.scala 29:20]
    id.io.ex.ready <= ex.io.id.ready @[Core.scala 30:20]
    ex.io.id.excep.valid_inst <= id.io.ex.excep.valid_inst @[Core.scala 30:20]
    ex.io.id.excep.pc <= id.io.ex.excep.pc @[Core.scala 30:20]
    ex.io.id.excep.value <= id.io.ex.excep.value @[Core.scala 30:20]
    ex.io.id.excep.code <= id.io.ex.excep.code @[Core.scala 30:20]
    ex.io.id.excep.valid <= id.io.ex.excep.valid @[Core.scala 30:20]
    ex.io.id.store_data <= id.io.ex.store_data @[Core.scala 30:20]
    ex.io.id.wrCSROp.data <= id.io.ex.wrCSROp.data @[Core.scala 30:20]
    ex.io.id.wrCSROp.addr <= id.io.ex.wrCSROp.addr @[Core.scala 30:20]
    ex.io.id.wrCSROp.valid <= id.io.ex.wrCSROp.valid @[Core.scala 30:20]
    ex.io.id.wrRegOp.rdy <= id.io.ex.wrRegOp.rdy @[Core.scala 30:20]
    ex.io.id.wrRegOp.data <= id.io.ex.wrRegOp.data @[Core.scala 30:20]
    ex.io.id.wrRegOp.addr <= id.io.ex.wrRegOp.addr @[Core.scala 30:20]
    ex.io.id.aluOp.opt <= id.io.ex.aluOp.opt @[Core.scala 30:20]
    ex.io.id.aluOp.rd2 <= id.io.ex.aluOp.rd2 @[Core.scala 30:20]
    ex.io.id.aluOp.rd1 <= id.io.ex.aluOp.rd1 @[Core.scala 30:20]
    ex.io.mem.ready <= mem.io.ex.ready @[Core.scala 31:20]
    mem.io.ex.excep.valid_inst <= ex.io.mem.excep.valid_inst @[Core.scala 31:20]
    mem.io.ex.excep.pc <= ex.io.mem.excep.pc @[Core.scala 31:20]
    mem.io.ex.excep.value <= ex.io.mem.excep.value @[Core.scala 31:20]
    mem.io.ex.excep.code <= ex.io.mem.excep.code @[Core.scala 31:20]
    mem.io.ex.excep.valid <= ex.io.mem.excep.valid @[Core.scala 31:20]
    mem.io.ex.wrCSROp.data <= ex.io.mem.wrCSROp.data @[Core.scala 31:20]
    mem.io.ex.wrCSROp.addr <= ex.io.mem.wrCSROp.addr @[Core.scala 31:20]
    mem.io.ex.wrCSROp.valid <= ex.io.mem.wrCSROp.valid @[Core.scala 31:20]
    mem.io.ex.wrRegOp.rdy <= ex.io.mem.wrRegOp.rdy @[Core.scala 31:20]
    mem.io.ex.wrRegOp.data <= ex.io.mem.wrRegOp.data @[Core.scala 31:20]
    mem.io.ex.wrRegOp.addr <= ex.io.mem.wrRegOp.addr @[Core.scala 31:20]
    mem.io.ex.ramOp.wdata <= ex.io.mem.ramOp.wdata @[Core.scala 31:20]
    mem.io.ex.ramOp.mode <= ex.io.mem.ramOp.mode @[Core.scala 31:20]
    mem.io.ex.ramOp.addr <= ex.io.mem.ramOp.addr @[Core.scala 31:20]
    reg.io.mem.rdy <= mem.io.reg.rdy @[Core.scala 32:20]
    reg.io.mem.data <= mem.io.reg.data @[Core.scala 32:20]
    reg.io.mem.addr <= mem.io.reg.addr @[Core.scala 32:20]
    mem.io.csr.inter.bits <= csr.io.mem.inter.bits @[Core.scala 33:20]
    mem.io.csr.inter.valid <= csr.io.mem.inter.valid @[Core.scala 33:20]
    csr.io.mem.excep.valid_inst <= mem.io.csr.excep.valid_inst @[Core.scala 33:20]
    csr.io.mem.excep.pc <= mem.io.csr.excep.pc @[Core.scala 33:20]
    csr.io.mem.excep.value <= mem.io.csr.excep.value @[Core.scala 33:20]
    csr.io.mem.excep.code <= mem.io.csr.excep.code @[Core.scala 33:20]
    csr.io.mem.excep.valid <= mem.io.csr.excep.valid @[Core.scala 33:20]
    csr.io.mem.wrCSROp.data <= mem.io.csr.wrCSROp.data @[Core.scala 33:20]
    csr.io.mem.wrCSROp.addr <= mem.io.csr.wrCSROp.addr @[Core.scala 33:20]
    csr.io.mem.wrCSROp.valid <= mem.io.csr.wrCSROp.valid @[Core.scala 33:20]
    id.io.reg.read2.data <= reg.io.id.read2.data @[Core.scala 36:20]
    reg.io.id.read2.addr <= id.io.reg.read2.addr @[Core.scala 36:20]
    id.io.reg.read1.data <= reg.io.id.read1.data @[Core.scala 36:20]
    reg.io.id.read1.addr <= id.io.reg.read1.addr @[Core.scala 36:20]
    id.io.csr.prv <= csr.io.id.prv @[Core.scala 37:20]
    id.io.csr.rdata <= csr.io.id.rdata @[Core.scala 37:20]
    csr.io.id.addr <= id.io.csr.addr @[Core.scala 37:20]
    id.io.exWrRegOp.rdy <= ex.io.mem.wrRegOp.rdy @[Core.scala 38:20]
    id.io.exWrRegOp.data <= ex.io.mem.wrRegOp.data @[Core.scala 38:20]
    id.io.exWrRegOp.addr <= ex.io.mem.wrRegOp.addr @[Core.scala 38:20]
    id.io.memWrRegOp.rdy <= mem.io.reg.rdy @[Core.scala 39:20]
    id.io.memWrRegOp.data <= mem.io.reg.data @[Core.scala 39:20]
    id.io.memWrRegOp.addr <= mem.io.reg.addr @[Core.scala 39:20]
    id.io.exWrCSROp.data <= ex.io.mem.wrCSROp.data @[Core.scala 40:20]
    id.io.exWrCSROp.addr <= ex.io.mem.wrCSROp.addr @[Core.scala 40:20]
    id.io.exWrCSROp.valid <= ex.io.mem.wrCSROp.valid @[Core.scala 40:20]
    id.io.memWrCSROp.data <= mem.io.csr.wrCSROp.data @[Core.scala 41:20]
    id.io.memWrCSROp.addr <= mem.io.csr.wrCSROp.addr @[Core.scala 41:20]
    id.io.memWrCSROp.valid <= mem.io.csr.wrCSROp.valid @[Core.scala 41:20]
    iff.io.mmu.pageFault <= mmu.io.iff.pageFault @[Core.scala 44:20]
    iff.io.mmu.ok <= mmu.io.iff.ok @[Core.scala 44:20]
    iff.io.mmu.rdata <= mmu.io.iff.rdata @[Core.scala 44:20]
    mmu.io.iff.wdata <= iff.io.mmu.wdata @[Core.scala 44:20]
    mmu.io.iff.mode <= iff.io.mmu.mode @[Core.scala 44:20]
    mmu.io.iff.addr <= iff.io.mmu.addr @[Core.scala 44:20]
    mem.io.mmu.pageFault <= mmu.io.mem.pageFault @[Core.scala 45:20]
    mem.io.mmu.ok <= mmu.io.mem.ok @[Core.scala 45:20]
    mem.io.mmu.rdata <= mmu.io.mem.rdata @[Core.scala 45:20]
    mmu.io.mem.wdata <= mem.io.mmu.wdata @[Core.scala 45:20]
    mmu.io.mem.mode <= mem.io.mmu.mode @[Core.scala 45:20]
    mmu.io.mem.addr <= mem.io.mmu.addr @[Core.scala 45:20]
    mmu.io.dev.mem.ok <= io.dev.mem.ok @[Core.scala 46:20]
    mmu.io.dev.mem.rdata <= io.dev.mem.rdata @[Core.scala 46:20]
    io.dev.mem.wdata <= mmu.io.dev.mem.wdata @[Core.scala 46:20]
    io.dev.mem.mode <= mmu.io.dev.mem.mode @[Core.scala 46:20]
    io.dev.mem.addr <= mmu.io.dev.mem.addr @[Core.scala 46:20]
    mmu.io.dev.if_.ok <= io.dev.if_.ok @[Core.scala 46:20]
    mmu.io.dev.if_.rdata <= io.dev.if_.rdata @[Core.scala 46:20]
    io.dev.if_.wdata <= mmu.io.dev.if_.wdata @[Core.scala 46:20]
    io.dev.if_.mode <= mmu.io.dev.if_.mode @[Core.scala 46:20]
    io.dev.if_.addr <= mmu.io.dev.if_.addr @[Core.scala 46:20]
    mmu.io.csr.sum <= csr.io.mmu.sum @[Core.scala 47:20]
    mmu.io.csr.mxr <= csr.io.mmu.mxr @[Core.scala 47:20]
    mmu.io.csr.priv <= csr.io.mmu.priv @[Core.scala 47:20]
    mmu.io.csr.flush.addr <= csr.io.mmu.flush.addr @[Core.scala 47:20]
    mmu.io.csr.flush.all <= csr.io.mmu.flush.all @[Core.scala 47:20]
    mmu.io.csr.flush.one <= csr.io.mmu.flush.one @[Core.scala 47:20]
    mmu.io.csr.satp <= csr.io.mmu.satp @[Core.scala 47:20]
    node _T = or(csr.io.flush, id.io.iff.branch.valid) @[Core.scala 50:42]
    iff.io.id.branch.valid <= _T @[Core.scala 50:26]
    node _T_1 = mux(csr.io.flush, csr.io.csrNewPc, id.io.iff.branch.bits) @[Core.scala 51:31]
    iff.io.id.branch.bits <= _T_1 @[Core.scala 51:25]
    id.io.flush <= csr.io.flush @[Core.scala 52:15]
    ex.io.flush <= csr.io.flush @[Core.scala 53:15]
    mem.io.flush <= csr.io.flush @[Core.scala 54:16]
    wire _T_2 : {valid : UInt<1>, bits : UInt<32>} @[Core.scala 57:40]
    _T_2.bits <= UInt<32>("h00") @[Core.scala 57:40]
    _T_2.valid <= UInt<1>("h00") @[Core.scala 57:40]
    csr.io.external_inter.bits <= _T_2.bits @[Core.scala 57:25]
    csr.io.external_inter.valid <= _T_2.valid @[Core.scala 57:25]
    io.debug.reg[0] <= reg.io.log[0] @[Core.scala 61:15]
    io.debug.reg[1] <= reg.io.log[1] @[Core.scala 61:15]
    io.debug.reg[2] <= reg.io.log[2] @[Core.scala 61:15]
    io.debug.reg[3] <= reg.io.log[3] @[Core.scala 61:15]
    io.debug.reg[4] <= reg.io.log[4] @[Core.scala 61:15]
    io.debug.reg[5] <= reg.io.log[5] @[Core.scala 61:15]
    io.debug.reg[6] <= reg.io.log[6] @[Core.scala 61:15]
    io.debug.reg[7] <= reg.io.log[7] @[Core.scala 61:15]
    io.debug.reg[8] <= reg.io.log[8] @[Core.scala 61:15]
    io.debug.reg[9] <= reg.io.log[9] @[Core.scala 61:15]
    io.debug.reg[10] <= reg.io.log[10] @[Core.scala 61:15]
    io.debug.reg[11] <= reg.io.log[11] @[Core.scala 61:15]
    io.debug.reg[12] <= reg.io.log[12] @[Core.scala 61:15]
    io.debug.reg[13] <= reg.io.log[13] @[Core.scala 61:15]
    io.debug.reg[14] <= reg.io.log[14] @[Core.scala 61:15]
    io.debug.reg[15] <= reg.io.log[15] @[Core.scala 61:15]
    io.debug.reg[16] <= reg.io.log[16] @[Core.scala 61:15]
    io.debug.reg[17] <= reg.io.log[17] @[Core.scala 61:15]
    io.debug.reg[18] <= reg.io.log[18] @[Core.scala 61:15]
    io.debug.reg[19] <= reg.io.log[19] @[Core.scala 61:15]
    io.debug.reg[20] <= reg.io.log[20] @[Core.scala 61:15]
    io.debug.reg[21] <= reg.io.log[21] @[Core.scala 61:15]
    io.debug.reg[22] <= reg.io.log[22] @[Core.scala 61:15]
    io.debug.reg[23] <= reg.io.log[23] @[Core.scala 61:15]
    io.debug.reg[24] <= reg.io.log[24] @[Core.scala 61:15]
    io.debug.reg[25] <= reg.io.log[25] @[Core.scala 61:15]
    io.debug.reg[26] <= reg.io.log[26] @[Core.scala 61:15]
    io.debug.reg[27] <= reg.io.log[27] @[Core.scala 61:15]
    io.debug.reg[28] <= reg.io.log[28] @[Core.scala 61:15]
    io.debug.reg[29] <= reg.io.log[29] @[Core.scala 61:15]
    io.debug.reg[30] <= reg.io.log[30] @[Core.scala 61:15]
    io.debug.reg[31] <= reg.io.log[31] @[Core.scala 61:15]
    io.debug.ifpc <= iff.io.id.excep.pc @[Core.scala 62:15]
    wire _T_3 : {aluOp : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, store_data : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}} @[Core.scala 63:35]
    node _T_4 = cat(id.io.ex.excep.valid_inst, id.io.ex.ready) @[Core.scala 63:35]
    node _T_5 = cat(id.io.ex.excep.value, id.io.ex.excep.pc) @[Core.scala 63:35]
    node _T_6 = cat(_T_5, _T_4) @[Core.scala 63:35]
    node _T_7 = cat(id.io.ex.excep.valid, id.io.ex.excep.code) @[Core.scala 63:35]
    node _T_8 = cat(id.io.ex.wrCSROp.data, id.io.ex.store_data) @[Core.scala 63:35]
    node _T_9 = cat(_T_8, _T_7) @[Core.scala 63:35]
    node _T_10 = cat(_T_9, _T_6) @[Core.scala 63:35]
    node _T_11 = cat(id.io.ex.wrCSROp.valid, id.io.ex.wrCSROp.addr) @[Core.scala 63:35]
    node _T_12 = cat(id.io.ex.wrRegOp.data, id.io.ex.wrRegOp.rdy) @[Core.scala 63:35]
    node _T_13 = cat(_T_12, _T_11) @[Core.scala 63:35]
    node _T_14 = cat(id.io.ex.aluOp.opt, id.io.ex.wrRegOp.addr) @[Core.scala 63:35]
    node _T_15 = cat(id.io.ex.aluOp.rd1, id.io.ex.aluOp.rd2) @[Core.scala 63:35]
    node _T_16 = cat(_T_15, _T_14) @[Core.scala 63:35]
    node _T_17 = cat(_T_16, _T_13) @[Core.scala 63:35]
    node _T_18 = cat(_T_17, _T_10) @[Core.scala 63:35]
    wire _T_19 : UInt<282>
    _T_19 <= _T_18
    node _T_20 = bits(_T_19, 0, 0) @[Core.scala 63:35]
    _T_3.excep.valid_inst <= _T_20 @[Core.scala 63:35]
    node _T_21 = bits(_T_19, 32, 1) @[Core.scala 63:35]
    _T_3.excep.pc <= _T_21 @[Core.scala 63:35]
    node _T_22 = bits(_T_19, 64, 33) @[Core.scala 63:35]
    _T_3.excep.value <= _T_22 @[Core.scala 63:35]
    node _T_23 = bits(_T_19, 96, 65) @[Core.scala 63:35]
    _T_3.excep.code <= _T_23 @[Core.scala 63:35]
    node _T_24 = bits(_T_19, 97, 97) @[Core.scala 63:35]
    _T_3.excep.valid <= _T_24 @[Core.scala 63:35]
    node _T_25 = bits(_T_19, 129, 98) @[Core.scala 63:35]
    _T_3.store_data <= _T_25 @[Core.scala 63:35]
    node _T_26 = bits(_T_19, 161, 130) @[Core.scala 63:35]
    _T_3.wrCSROp.data <= _T_26 @[Core.scala 63:35]
    node _T_27 = bits(_T_19, 173, 162) @[Core.scala 63:35]
    _T_3.wrCSROp.addr <= _T_27 @[Core.scala 63:35]
    node _T_28 = bits(_T_19, 174, 174) @[Core.scala 63:35]
    _T_3.wrCSROp.valid <= _T_28 @[Core.scala 63:35]
    node _T_29 = bits(_T_19, 175, 175) @[Core.scala 63:35]
    _T_3.wrRegOp.rdy <= _T_29 @[Core.scala 63:35]
    node _T_30 = bits(_T_19, 207, 176) @[Core.scala 63:35]
    _T_3.wrRegOp.data <= _T_30 @[Core.scala 63:35]
    node _T_31 = bits(_T_19, 212, 208) @[Core.scala 63:35]
    _T_3.wrRegOp.addr <= _T_31 @[Core.scala 63:35]
    node _T_32 = bits(_T_19, 217, 213) @[Core.scala 63:35]
    _T_3.aluOp.opt <= _T_32 @[Core.scala 63:35]
    node _T_33 = bits(_T_19, 249, 218) @[Core.scala 63:35]
    _T_3.aluOp.rd2 <= _T_33 @[Core.scala 63:35]
    node _T_34 = bits(_T_19, 281, 250) @[Core.scala 63:35]
    _T_3.aluOp.rd1 <= _T_34 @[Core.scala 63:35]
    io.debug.idex.excep.valid_inst <= _T_3.excep.valid_inst @[Core.scala 63:15]
    io.debug.idex.excep.pc <= _T_3.excep.pc @[Core.scala 63:15]
    io.debug.idex.excep.value <= _T_3.excep.value @[Core.scala 63:15]
    io.debug.idex.excep.code <= _T_3.excep.code @[Core.scala 63:15]
    io.debug.idex.excep.valid <= _T_3.excep.valid @[Core.scala 63:15]
    io.debug.idex.store_data <= _T_3.store_data @[Core.scala 63:15]
    io.debug.idex.wrCSROp.data <= _T_3.wrCSROp.data @[Core.scala 63:15]
    io.debug.idex.wrCSROp.addr <= _T_3.wrCSROp.addr @[Core.scala 63:15]
    io.debug.idex.wrCSROp.valid <= _T_3.wrCSROp.valid @[Core.scala 63:15]
    io.debug.idex.wrRegOp.rdy <= _T_3.wrRegOp.rdy @[Core.scala 63:15]
    io.debug.idex.wrRegOp.data <= _T_3.wrRegOp.data @[Core.scala 63:15]
    io.debug.idex.wrRegOp.addr <= _T_3.wrRegOp.addr @[Core.scala 63:15]
    io.debug.idex.aluOp.opt <= _T_3.aluOp.opt @[Core.scala 63:15]
    io.debug.idex.aluOp.rd2 <= _T_3.aluOp.rd2 @[Core.scala 63:15]
    io.debug.idex.aluOp.rd1 <= _T_3.aluOp.rd1 @[Core.scala 63:15]
    io.debug.finish_pc.valid <= mem.io.csr.excep.valid_inst @[Core.scala 64:21]
    io.debug.finish_pc.bits <= mem.io.csr.excep.pc @[Core.scala 65:21]
    
  module NullDev_1 : 
    input clock : Clock
    input reset : Reset
    input io : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}
    
    io.ok <= UInt<1>("h00") @[NullDev.scala 9:9]
    io.rdata <= UInt<1>("h00") @[NullDev.scala 10:12]
    
  module IOManager_Anon : 
    input clock : Clock
    input reset : Reset
    output io : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}
    
    io.addr <= UInt<1>("h00") @[IOManager.scala 56:13]
    io.mode <= UInt<1>("h00") @[IOManager.scala 57:13]
    io.wdata <= UInt<1>("h00") @[IOManager.scala 58:14]
    
  module IOManager : 
    input clock : Clock
    input reset : Reset
    output io : {flip core : {if_ : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, mem : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}}, ram : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, flash : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, serial : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}}
    
    inst null_device of NullDev_1 @[IOManager.scala 53:27]
    null_device.clock <= clock
    null_device.reset <= reset
    inst null_user of IOManager_Anon @[IOManager.scala 54:27]
    null_user.clock <= clock
    null_user.reset <= reset
    null_user.io.ok <= io.ram.ok @[IOManager.scala 62:10]
    null_user.io.rdata <= io.ram.rdata @[IOManager.scala 62:10]
    io.ram.wdata <= null_user.io.wdata @[IOManager.scala 62:10]
    io.ram.mode <= null_user.io.mode @[IOManager.scala 62:10]
    io.ram.addr <= null_user.io.addr @[IOManager.scala 62:10]
    null_user.io.ok <= io.flash.ok @[IOManager.scala 63:12]
    null_user.io.rdata <= io.flash.rdata @[IOManager.scala 63:12]
    io.flash.wdata <= null_user.io.wdata @[IOManager.scala 63:12]
    io.flash.mode <= null_user.io.mode @[IOManager.scala 63:12]
    io.flash.addr <= null_user.io.addr @[IOManager.scala 63:12]
    null_user.io.ok <= io.serial.ok @[IOManager.scala 64:13]
    null_user.io.rdata <= io.serial.rdata @[IOManager.scala 64:13]
    io.serial.wdata <= null_user.io.wdata @[IOManager.scala 64:13]
    io.serial.mode <= null_user.io.mode @[IOManager.scala 64:13]
    io.serial.addr <= null_user.io.addr @[IOManager.scala 64:13]
    io.core.mem.ok <= null_device.io.ok @[IOManager.scala 65:7]
    io.core.mem.rdata <= null_device.io.rdata @[IOManager.scala 65:7]
    null_device.io.wdata <= io.core.mem.wdata @[IOManager.scala 65:7]
    null_device.io.mode <= io.core.mem.mode @[IOManager.scala 65:7]
    null_device.io.addr <= io.core.mem.addr @[IOManager.scala 65:7]
    io.core.if_.ok <= null_device.io.ok @[IOManager.scala 66:7]
    io.core.if_.rdata <= null_device.io.rdata @[IOManager.scala 66:7]
    null_device.io.wdata <= io.core.if_.wdata @[IOManager.scala 66:7]
    null_device.io.mode <= io.core.if_.mode @[IOManager.scala 66:7]
    null_device.io.addr <= io.core.if_.addr @[IOManager.scala 66:7]
    reg ifWait : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[IOManager.scala 69:24]
    reg memWait : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[IOManager.scala 70:24]
    node _T = eq(UInt<2>("h01"), ifWait) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.core.if_.rdata <= io.ram.rdata @[IOManager.scala 74:16]
      io.core.if_.ok <= io.ram.ok @[IOManager.scala 75:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h02"), ifWait) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.core.if_.rdata <= io.flash.rdata @[IOManager.scala 74:16]
        io.core.if_.ok <= io.flash.ok @[IOManager.scala 75:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h03"), ifWait) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.core.if_.rdata <= io.serial.rdata @[IOManager.scala 74:16]
          io.core.if_.ok <= io.serial.ok @[IOManager.scala 75:13]
          skip @[Conditional.scala 39:67]
    node _T_3 = eq(UInt<2>("h01"), memWait) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      io.core.mem.rdata <= io.ram.rdata @[IOManager.scala 74:16]
      io.core.mem.ok <= io.ram.ok @[IOManager.scala 75:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<2>("h02"), memWait) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        io.core.mem.rdata <= io.flash.rdata @[IOManager.scala 74:16]
        io.core.mem.ok <= io.flash.ok @[IOManager.scala 75:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<2>("h03"), memWait) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          io.core.mem.rdata <= io.serial.rdata @[IOManager.scala 74:16]
          io.core.mem.ok <= io.serial.ok @[IOManager.scala 75:13]
          skip @[Conditional.scala 39:67]
    node _T_6 = neq(ifWait, UInt<2>("h02")) @[IOManager.scala 93:26]
    node _T_7 = neq(memWait, UInt<2>("h02")) @[IOManager.scala 93:51]
    node flashFree = and(_T_6, _T_7) @[IOManager.scala 93:40]
    node _T_8 = neq(ifWait, UInt<2>("h00")) @[IOManager.scala 94:24]
    node _T_9 = eq(io.core.if_.ok, UInt<1>("h00")) @[IOManager.scala 94:40]
    node _T_10 = and(_T_8, _T_9) @[IOManager.scala 94:37]
    node _T_11 = mux(_T_10, ifWait, UInt<2>("h00")) @[IOManager.scala 94:16]
    ifWait <= _T_11 @[IOManager.scala 94:10]
    node _T_12 = neq(memWait, UInt<2>("h00")) @[IOManager.scala 95:26]
    node _T_13 = eq(io.core.mem.ok, UInt<1>("h00")) @[IOManager.scala 95:42]
    node _T_14 = and(_T_12, _T_13) @[IOManager.scala 95:39]
    node _T_15 = mux(_T_14, memWait, UInt<2>("h00")) @[IOManager.scala 95:17]
    memWait <= _T_15 @[IOManager.scala 95:11]
    node _T_16 = eq(memWait, UInt<2>("h00")) @[IOManager.scala 98:16]
    node _T_17 = neq(io.core.mem.mode, UInt<1>("h00")) @[IOManager.scala 98:41]
    node _T_18 = and(_T_16, _T_17) @[IOManager.scala 98:29]
    when _T_18 : @[IOManager.scala 98:58]
      node _T_19 = geq(io.core.mem.addr, UInt<32>("h080000000")) @[IOManager.scala 16:22]
      node _T_20 = lt(io.core.mem.addr, UInt<32>("h080800000")) @[IOManager.scala 16:43]
      node _T_21 = and(_T_19, _T_20) @[IOManager.scala 16:35]
      when _T_21 : @[IOManager.scala 99:26]
        io.ram.mode <= io.core.mem.mode @[IOManager.scala 78:17]
        io.ram.addr <= io.core.mem.addr @[IOManager.scala 79:17]
        io.ram.wdata <= io.core.mem.wdata @[IOManager.scala 80:18]
        node _T_22 = bits(io.core.mem.mode, 3, 3) @[Const.scala 24:33]
        when _T_22 : @[IOManager.scala 101:39]
          memWait <= UInt<2>("h00") @[IOManager.scala 102:17]
          io.core.mem.ok <= UInt<1>("h01") @[IOManager.scala 103:16]
          skip @[IOManager.scala 101:39]
        else : @[IOManager.scala 104:19]
          memWait <= UInt<2>("h01") @[IOManager.scala 105:17]
          io.core.mem.ok <= UInt<1>("h00") @[IOManager.scala 106:16]
          skip @[IOManager.scala 104:19]
        skip @[IOManager.scala 99:26]
      else : @[IOManager.scala 108:34]
        node _T_23 = geq(io.core.mem.addr, UInt<32>("h0800000")) @[IOManager.scala 17:24]
        node _T_24 = lt(io.core.mem.addr, UInt<32>("h01000000")) @[IOManager.scala 17:47]
        node _T_25 = and(_T_23, _T_24) @[IOManager.scala 17:39]
        when _T_25 : @[IOManager.scala 108:34]
          when flashFree : @[IOManager.scala 109:23]
            io.flash.mode <= io.core.mem.mode @[IOManager.scala 78:17]
            io.flash.addr <= io.core.mem.addr @[IOManager.scala 79:17]
            io.flash.wdata <= io.core.mem.wdata @[IOManager.scala 80:18]
            memWait <= UInt<2>("h02") @[IOManager.scala 111:17]
            skip @[IOManager.scala 109:23]
          skip @[IOManager.scala 108:34]
        else : @[IOManager.scala 113:35]
          node _T_26 = geq(io.core.mem.addr, UInt<32>("h010000000")) @[IOManager.scala 18:25]
          node _T_27 = lt(io.core.mem.addr, UInt<32>("h010000008")) @[IOManager.scala 18:49]
          node _T_28 = and(_T_26, _T_27) @[IOManager.scala 18:41]
          when _T_28 : @[IOManager.scala 113:35]
            io.serial.mode <= io.core.mem.mode @[IOManager.scala 78:17]
            io.serial.addr <= io.core.mem.addr @[IOManager.scala 79:17]
            io.serial.wdata <= io.core.mem.wdata @[IOManager.scala 80:18]
            node _T_29 = bits(io.core.mem.mode, 3, 3) @[Const.scala 24:33]
            when _T_29 : @[IOManager.scala 115:39]
              memWait <= UInt<2>("h00") @[IOManager.scala 116:17]
              io.core.mem.ok <= UInt<1>("h01") @[IOManager.scala 117:16]
              skip @[IOManager.scala 115:39]
            else : @[IOManager.scala 118:19]
              memWait <= UInt<2>("h03") @[IOManager.scala 119:17]
              io.core.mem.ok <= UInt<1>("h00") @[IOManager.scala 120:16]
              skip @[IOManager.scala 118:19]
            skip @[IOManager.scala 113:35]
          else : @[IOManager.scala 122:17]
            node _T_30 = asUInt(reset) @[IOManager.scala 123:13]
            node _T_31 = eq(_T_30, UInt<1>("h00")) @[IOManager.scala 123:13]
            when _T_31 : @[IOManager.scala 123:13]
              printf(clock, UInt<1>(1), "[IO] MEM access invalid address: %x\n", io.core.mem.addr) @[IOManager.scala 123:13]
              skip @[IOManager.scala 123:13]
            skip @[IOManager.scala 122:17]
      skip @[IOManager.scala 98:58]
    node _T_32 = eq(ifWait, UInt<2>("h00")) @[IOManager.scala 129:15]
    node _T_33 = eq(memWait, UInt<2>("h00")) @[IOManager.scala 129:39]
    node _T_34 = and(_T_32, _T_33) @[IOManager.scala 129:28]
    node _T_35 = eq(io.core.mem.mode, UInt<1>("h00")) @[IOManager.scala 129:64]
    node _T_36 = and(_T_34, _T_35) @[IOManager.scala 129:52]
    node _T_37 = neq(io.core.if_.mode, UInt<1>("h00")) @[IOManager.scala 129:92]
    node _T_38 = and(_T_36, _T_37) @[IOManager.scala 129:80]
    when _T_38 : @[IOManager.scala 129:109]
      node _T_39 = geq(io.core.if_.addr, UInt<32>("h080000000")) @[IOManager.scala 16:22]
      node _T_40 = lt(io.core.if_.addr, UInt<32>("h080800000")) @[IOManager.scala 16:43]
      node _T_41 = and(_T_39, _T_40) @[IOManager.scala 16:35]
      when _T_41 : @[IOManager.scala 130:26]
        io.ram.mode <= io.core.if_.mode @[IOManager.scala 78:17]
        io.ram.addr <= io.core.if_.addr @[IOManager.scala 79:17]
        io.ram.wdata <= io.core.if_.wdata @[IOManager.scala 80:18]
        ifWait <= UInt<2>("h01") @[IOManager.scala 132:14]
        io.core.if_.ok <= UInt<1>("h00") @[IOManager.scala 133:14]
        skip @[IOManager.scala 130:26]
      else : @[IOManager.scala 134:34]
        node _T_42 = geq(io.core.if_.addr, UInt<32>("h0800000")) @[IOManager.scala 17:24]
        node _T_43 = lt(io.core.if_.addr, UInt<32>("h01000000")) @[IOManager.scala 17:47]
        node _T_44 = and(_T_42, _T_43) @[IOManager.scala 17:39]
        when _T_44 : @[IOManager.scala 134:34]
          io.flash.mode <= io.core.if_.mode @[IOManager.scala 78:17]
          io.flash.addr <= io.core.if_.addr @[IOManager.scala 79:17]
          io.flash.wdata <= io.core.if_.wdata @[IOManager.scala 80:18]
          ifWait <= UInt<2>("h02") @[IOManager.scala 136:14]
          io.core.if_.ok <= UInt<1>("h00") @[IOManager.scala 137:14]
          skip @[IOManager.scala 134:34]
        else : @[IOManager.scala 138:17]
          node _T_45 = asUInt(reset) @[IOManager.scala 139:13]
          node _T_46 = eq(_T_45, UInt<1>("h00")) @[IOManager.scala 139:13]
          when _T_46 : @[IOManager.scala 139:13]
            printf(clock, UInt<1>(1), "[IO] IF access invalid address: %x\n", io.core.if_.addr) @[IOManager.scala 139:13]
            skip @[IOManager.scala 139:13]
          skip @[IOManager.scala 138:17]
      skip @[IOManager.scala 129:109]
    
  module ChiselTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ram : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, flash : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, serial : {addr : UInt<32>, mode : UInt<4>, wdata : UInt<32>, flip rdata : UInt<32>, flip ok : UInt<1>}, debug : {idex : {aluOp : {rd1 : UInt<32>, rd2 : UInt<32>, opt : UInt<5>}, wrRegOp : {addr : UInt<5>, data : UInt<32>, rdy : UInt<1>}, wrCSROp : {valid : UInt<1>, addr : UInt<12>, data : UInt<32>}, store_data : UInt<32>, excep : {valid : UInt<1>, code : UInt<32>, value : UInt<32>, pc : UInt<32>, valid_inst : UInt<1>}}, ifpc : UInt<32>, reg : UInt<32>[32], finish_pc : {valid : UInt<1>, bits : UInt<32>}}}
    
    inst core of Core @[Main.scala 16:23]
    core.clock <= clock
    core.reset <= reset
    inst ioCtrl of IOManager @[Main.scala 17:23]
    ioCtrl.clock <= clock
    ioCtrl.reset <= reset
    core.io.dev.mem.ok <= ioCtrl.io.core.mem.ok @[Main.scala 19:15]
    core.io.dev.mem.rdata <= ioCtrl.io.core.mem.rdata @[Main.scala 19:15]
    ioCtrl.io.core.mem.wdata <= core.io.dev.mem.wdata @[Main.scala 19:15]
    ioCtrl.io.core.mem.mode <= core.io.dev.mem.mode @[Main.scala 19:15]
    ioCtrl.io.core.mem.addr <= core.io.dev.mem.addr @[Main.scala 19:15]
    core.io.dev.if_.ok <= ioCtrl.io.core.if_.ok @[Main.scala 19:15]
    core.io.dev.if_.rdata <= ioCtrl.io.core.if_.rdata @[Main.scala 19:15]
    ioCtrl.io.core.if_.wdata <= core.io.dev.if_.wdata @[Main.scala 19:15]
    ioCtrl.io.core.if_.mode <= core.io.dev.if_.mode @[Main.scala 19:15]
    ioCtrl.io.core.if_.addr <= core.io.dev.if_.addr @[Main.scala 19:15]
    io.debug.finish_pc.bits <= core.io.debug.finish_pc.bits @[Main.scala 20:17]
    io.debug.finish_pc.valid <= core.io.debug.finish_pc.valid @[Main.scala 20:17]
    io.debug.reg[0] <= core.io.debug.reg[0] @[Main.scala 20:17]
    io.debug.reg[1] <= core.io.debug.reg[1] @[Main.scala 20:17]
    io.debug.reg[2] <= core.io.debug.reg[2] @[Main.scala 20:17]
    io.debug.reg[3] <= core.io.debug.reg[3] @[Main.scala 20:17]
    io.debug.reg[4] <= core.io.debug.reg[4] @[Main.scala 20:17]
    io.debug.reg[5] <= core.io.debug.reg[5] @[Main.scala 20:17]
    io.debug.reg[6] <= core.io.debug.reg[6] @[Main.scala 20:17]
    io.debug.reg[7] <= core.io.debug.reg[7] @[Main.scala 20:17]
    io.debug.reg[8] <= core.io.debug.reg[8] @[Main.scala 20:17]
    io.debug.reg[9] <= core.io.debug.reg[9] @[Main.scala 20:17]
    io.debug.reg[10] <= core.io.debug.reg[10] @[Main.scala 20:17]
    io.debug.reg[11] <= core.io.debug.reg[11] @[Main.scala 20:17]
    io.debug.reg[12] <= core.io.debug.reg[12] @[Main.scala 20:17]
    io.debug.reg[13] <= core.io.debug.reg[13] @[Main.scala 20:17]
    io.debug.reg[14] <= core.io.debug.reg[14] @[Main.scala 20:17]
    io.debug.reg[15] <= core.io.debug.reg[15] @[Main.scala 20:17]
    io.debug.reg[16] <= core.io.debug.reg[16] @[Main.scala 20:17]
    io.debug.reg[17] <= core.io.debug.reg[17] @[Main.scala 20:17]
    io.debug.reg[18] <= core.io.debug.reg[18] @[Main.scala 20:17]
    io.debug.reg[19] <= core.io.debug.reg[19] @[Main.scala 20:17]
    io.debug.reg[20] <= core.io.debug.reg[20] @[Main.scala 20:17]
    io.debug.reg[21] <= core.io.debug.reg[21] @[Main.scala 20:17]
    io.debug.reg[22] <= core.io.debug.reg[22] @[Main.scala 20:17]
    io.debug.reg[23] <= core.io.debug.reg[23] @[Main.scala 20:17]
    io.debug.reg[24] <= core.io.debug.reg[24] @[Main.scala 20:17]
    io.debug.reg[25] <= core.io.debug.reg[25] @[Main.scala 20:17]
    io.debug.reg[26] <= core.io.debug.reg[26] @[Main.scala 20:17]
    io.debug.reg[27] <= core.io.debug.reg[27] @[Main.scala 20:17]
    io.debug.reg[28] <= core.io.debug.reg[28] @[Main.scala 20:17]
    io.debug.reg[29] <= core.io.debug.reg[29] @[Main.scala 20:17]
    io.debug.reg[30] <= core.io.debug.reg[30] @[Main.scala 20:17]
    io.debug.reg[31] <= core.io.debug.reg[31] @[Main.scala 20:17]
    io.debug.ifpc <= core.io.debug.ifpc @[Main.scala 20:17]
    io.debug.idex.excep.valid_inst <= core.io.debug.idex.excep.valid_inst @[Main.scala 20:17]
    io.debug.idex.excep.pc <= core.io.debug.idex.excep.pc @[Main.scala 20:17]
    io.debug.idex.excep.value <= core.io.debug.idex.excep.value @[Main.scala 20:17]
    io.debug.idex.excep.code <= core.io.debug.idex.excep.code @[Main.scala 20:17]
    io.debug.idex.excep.valid <= core.io.debug.idex.excep.valid @[Main.scala 20:17]
    io.debug.idex.store_data <= core.io.debug.idex.store_data @[Main.scala 20:17]
    io.debug.idex.wrCSROp.data <= core.io.debug.idex.wrCSROp.data @[Main.scala 20:17]
    io.debug.idex.wrCSROp.addr <= core.io.debug.idex.wrCSROp.addr @[Main.scala 20:17]
    io.debug.idex.wrCSROp.valid <= core.io.debug.idex.wrCSROp.valid @[Main.scala 20:17]
    io.debug.idex.wrRegOp.rdy <= core.io.debug.idex.wrRegOp.rdy @[Main.scala 20:17]
    io.debug.idex.wrRegOp.data <= core.io.debug.idex.wrRegOp.data @[Main.scala 20:17]
    io.debug.idex.wrRegOp.addr <= core.io.debug.idex.wrRegOp.addr @[Main.scala 20:17]
    io.debug.idex.aluOp.opt <= core.io.debug.idex.aluOp.opt @[Main.scala 20:17]
    io.debug.idex.aluOp.rd2 <= core.io.debug.idex.aluOp.rd2 @[Main.scala 20:17]
    io.debug.idex.aluOp.rd1 <= core.io.debug.idex.aluOp.rd1 @[Main.scala 20:17]
    ioCtrl.io.ram.ok <= io.ram.ok @[Main.scala 21:15]
    ioCtrl.io.ram.rdata <= io.ram.rdata @[Main.scala 21:15]
    io.ram.wdata <= ioCtrl.io.ram.wdata @[Main.scala 21:15]
    io.ram.mode <= ioCtrl.io.ram.mode @[Main.scala 21:15]
    io.ram.addr <= ioCtrl.io.ram.addr @[Main.scala 21:15]
    ioCtrl.io.flash.ok <= io.flash.ok @[Main.scala 22:15]
    ioCtrl.io.flash.rdata <= io.flash.rdata @[Main.scala 22:15]
    io.flash.wdata <= ioCtrl.io.flash.wdata @[Main.scala 22:15]
    io.flash.mode <= ioCtrl.io.flash.mode @[Main.scala 22:15]
    io.flash.addr <= ioCtrl.io.flash.addr @[Main.scala 22:15]
    ioCtrl.io.serial.ok <= io.serial.ok @[Main.scala 23:15]
    ioCtrl.io.serial.rdata <= io.serial.rdata @[Main.scala 23:15]
    io.serial.wdata <= ioCtrl.io.serial.wdata @[Main.scala 23:15]
    io.serial.mode <= ioCtrl.io.serial.mode @[Main.scala 23:15]
    io.serial.addr <= ioCtrl.io.serial.addr @[Main.scala 23:15]
    
